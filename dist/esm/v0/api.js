/* tslint:disable */
/* eslint-disable */
/**
 * MIT Open API
 * MIT public API
 *
 * The version of the OpenAPI document: 0.0.1 (v0)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from './base';
/**
 * CkeditorApi - axios parameter creator
 * @export
 */
export const CkeditorApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get the JWT to authenticate for CKEditor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ckeditorRetrieve: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/api/v0/ckeditor/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CkeditorApi - functional programming interface
 * @export
 */
export const CkeditorApiFp = function (configuration) {
    const localVarAxiosParamCreator = CkeditorApiAxiosParamCreator(configuration);
    return {
        /**
         * Get the JWT to authenticate for CKEditor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ckeditorRetrieve(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ckeditorRetrieve(options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = operationServerMap['CkeditorApi.ckeditorRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
/**
 * CkeditorApi - factory interface
 * @export
 */
export const CkeditorApiFactory = function (configuration, basePath, axios) {
    const localVarFp = CkeditorApiFp(configuration);
    return {
        /**
         * Get the JWT to authenticate for CKEditor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ckeditorRetrieve(options) {
            return localVarFp.ckeditorRetrieve(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CkeditorApi - object-oriented interface
 * @export
 * @class CkeditorApi
 * @extends {BaseAPI}
 */
export class CkeditorApi extends BaseAPI {
    /**
     * Get the JWT to authenticate for CKEditor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CkeditorApi
     */
    ckeditorRetrieve(options) {
        return CkeditorApiFp(this.configuration).ckeditorRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * FieldsApi - axios parameter creator
 * @export
 */
export const FieldsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
         * @summary Create
         * @param {FieldChannelCreateRequest} FieldChannelCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsCreate: (FieldChannelCreateRequest_1, ...args_1) => __awaiter(this, [FieldChannelCreateRequest_1, ...args_1], void 0, function* (FieldChannelCreateRequest, options = {}) {
            // verify required parameter 'FieldChannelCreateRequest' is not null or undefined
            assertParamExists('fieldsCreate', 'FieldChannelCreateRequest', FieldChannelCreateRequest);
            const localVarPath = `/api/v0/fields/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(FieldChannelCreateRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
         * @summary Destroy
         * @param {string} field_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsDestroy: (field_name_1, ...args_2) => __awaiter(this, [field_name_1, ...args_2], void 0, function* (field_name, options = {}) {
            // verify required parameter 'field_name' is not null or undefined
            assertParamExists('fieldsDestroy', 'field_name', field_name);
            const localVarPath = `/api/v0/fields/{field_name}/`
                .replace(`{${"field_name"}}`, encodeURIComponent(String(field_name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
         * @summary List
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsList: (limit_1, offset_1, ...args_3) => __awaiter(this, [limit_1, offset_1, ...args_3], void 0, function* (limit, offset, options = {}) {
            const localVarPath = `/api/v0/fields/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * View for listing and adding moderators
         * @summary Field Moderators Create
         * @param {string} field_name
         * @param {FieldModeratorRequest} [FieldModeratorRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsModeratorsCreate: (field_name_2, FieldModeratorRequest_1, ...args_4) => __awaiter(this, [field_name_2, FieldModeratorRequest_1, ...args_4], void 0, function* (field_name, FieldModeratorRequest, options = {}) {
            // verify required parameter 'field_name' is not null or undefined
            assertParamExists('fieldsModeratorsCreate', 'field_name', field_name);
            const localVarPath = `/api/v0/fields/{field_name}/moderators/`
                .replace(`{${"field_name"}}`, encodeURIComponent(String(field_name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(FieldModeratorRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove the user from the moderator groups for this website
         * @summary Field Moderators Destroy
         * @param {string} field_name
         * @param {string} moderator_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsModeratorsDestroy: (field_name_3, moderator_name_1, ...args_5) => __awaiter(this, [field_name_3, moderator_name_1, ...args_5], void 0, function* (field_name, moderator_name, options = {}) {
            // verify required parameter 'field_name' is not null or undefined
            assertParamExists('fieldsModeratorsDestroy', 'field_name', field_name);
            // verify required parameter 'moderator_name' is not null or undefined
            assertParamExists('fieldsModeratorsDestroy', 'moderator_name', moderator_name);
            const localVarPath = `/api/v0/fields/{field_name}/moderators/{moderator_name}/`
                .replace(`{${"field_name"}}`, encodeURIComponent(String(field_name)))
                .replace(`{${"moderator_name"}}`, encodeURIComponent(String(moderator_name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * View for listing and adding moderators
         * @summary Field Moderators List
         * @param {string} field_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsModeratorsList: (field_name_4, ...args_6) => __awaiter(this, [field_name_4, ...args_6], void 0, function* (field_name, options = {}) {
            // verify required parameter 'field_name' is not null or undefined
            assertParamExists('fieldsModeratorsList', 'field_name', field_name);
            const localVarPath = `/api/v0/fields/{field_name}/moderators/`
                .replace(`{${"field_name"}}`, encodeURIComponent(String(field_name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
         * @summary Update
         * @param {string} field_name
         * @param {PatchedFieldChannelWriteRequest} [PatchedFieldChannelWriteRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsPartialUpdate: (field_name_5, PatchedFieldChannelWriteRequest_1, ...args_7) => __awaiter(this, [field_name_5, PatchedFieldChannelWriteRequest_1, ...args_7], void 0, function* (field_name, PatchedFieldChannelWriteRequest, options = {}) {
            // verify required parameter 'field_name' is not null or undefined
            assertParamExists('fieldsPartialUpdate', 'field_name', field_name);
            const localVarPath = `/api/v0/fields/{field_name}/`
                .replace(`{${"field_name"}}`, encodeURIComponent(String(field_name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(PatchedFieldChannelWriteRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
         * @summary Retrieve
         * @param {string} field_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsRetrieve: (field_name_6, ...args_8) => __awaiter(this, [field_name_6, ...args_8], void 0, function* (field_name, options = {}) {
            // verify required parameter 'field_name' is not null or undefined
            assertParamExists('fieldsRetrieve', 'field_name', field_name);
            const localVarPath = `/api/v0/fields/{field_name}/`
                .replace(`{${"field_name"}}`, encodeURIComponent(String(field_name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * FieldsApi - functional programming interface
 * @export
 */
export const FieldsApiFp = function (configuration) {
    const localVarAxiosParamCreator = FieldsApiAxiosParamCreator(configuration);
    return {
        /**
         * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
         * @summary Create
         * @param {FieldChannelCreateRequest} FieldChannelCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsCreate(FieldChannelCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fieldsCreate(FieldChannelCreateRequest, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = operationServerMap['FieldsApi.fieldsCreate']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
         * @summary Destroy
         * @param {string} field_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsDestroy(field_name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fieldsDestroy(field_name, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = operationServerMap['FieldsApi.fieldsDestroy']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
         * @summary List
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsList(limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fieldsList(limit, offset, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = operationServerMap['FieldsApi.fieldsList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * View for listing and adding moderators
         * @summary Field Moderators Create
         * @param {string} field_name
         * @param {FieldModeratorRequest} [FieldModeratorRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsModeratorsCreate(field_name, FieldModeratorRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fieldsModeratorsCreate(field_name, FieldModeratorRequest, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = operationServerMap['FieldsApi.fieldsModeratorsCreate']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Remove the user from the moderator groups for this website
         * @summary Field Moderators Destroy
         * @param {string} field_name
         * @param {string} moderator_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsModeratorsDestroy(field_name, moderator_name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fieldsModeratorsDestroy(field_name, moderator_name, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = operationServerMap['FieldsApi.fieldsModeratorsDestroy']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * View for listing and adding moderators
         * @summary Field Moderators List
         * @param {string} field_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsModeratorsList(field_name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fieldsModeratorsList(field_name, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = operationServerMap['FieldsApi.fieldsModeratorsList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
         * @summary Update
         * @param {string} field_name
         * @param {PatchedFieldChannelWriteRequest} [PatchedFieldChannelWriteRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsPartialUpdate(field_name, PatchedFieldChannelWriteRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fieldsPartialUpdate(field_name, PatchedFieldChannelWriteRequest, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = operationServerMap['FieldsApi.fieldsPartialUpdate']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
         * @summary Retrieve
         * @param {string} field_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsRetrieve(field_name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fieldsRetrieve(field_name, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = operationServerMap['FieldsApi.fieldsRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
/**
 * FieldsApi - factory interface
 * @export
 */
export const FieldsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = FieldsApiFp(configuration);
    return {
        /**
         * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
         * @summary Create
         * @param {FieldsApiFieldsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsCreate(requestParameters, options) {
            return localVarFp.fieldsCreate(requestParameters.FieldChannelCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
         * @summary Destroy
         * @param {FieldsApiFieldsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsDestroy(requestParameters, options) {
            return localVarFp.fieldsDestroy(requestParameters.field_name, options).then((request) => request(axios, basePath));
        },
        /**
         * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
         * @summary List
         * @param {FieldsApiFieldsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsList(requestParameters = {}, options) {
            return localVarFp.fieldsList(requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * View for listing and adding moderators
         * @summary Field Moderators Create
         * @param {FieldsApiFieldsModeratorsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsModeratorsCreate(requestParameters, options) {
            return localVarFp.fieldsModeratorsCreate(requestParameters.field_name, requestParameters.FieldModeratorRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the user from the moderator groups for this website
         * @summary Field Moderators Destroy
         * @param {FieldsApiFieldsModeratorsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsModeratorsDestroy(requestParameters, options) {
            return localVarFp.fieldsModeratorsDestroy(requestParameters.field_name, requestParameters.moderator_name, options).then((request) => request(axios, basePath));
        },
        /**
         * View for listing and adding moderators
         * @summary Field Moderators List
         * @param {FieldsApiFieldsModeratorsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsModeratorsList(requestParameters, options) {
            return localVarFp.fieldsModeratorsList(requestParameters.field_name, options).then((request) => request(axios, basePath));
        },
        /**
         * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
         * @summary Update
         * @param {FieldsApiFieldsPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsPartialUpdate(requestParameters, options) {
            return localVarFp.fieldsPartialUpdate(requestParameters.field_name, requestParameters.PatchedFieldChannelWriteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
         * @summary Retrieve
         * @param {FieldsApiFieldsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsRetrieve(requestParameters, options) {
            return localVarFp.fieldsRetrieve(requestParameters.field_name, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * FieldsApi - object-oriented interface
 * @export
 * @class FieldsApi
 * @extends {BaseAPI}
 */
export class FieldsApi extends BaseAPI {
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @summary Create
     * @param {FieldsApiFieldsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    fieldsCreate(requestParameters, options) {
        return FieldsApiFp(this.configuration).fieldsCreate(requestParameters.FieldChannelCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @summary Destroy
     * @param {FieldsApiFieldsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    fieldsDestroy(requestParameters, options) {
        return FieldsApiFp(this.configuration).fieldsDestroy(requestParameters.field_name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @summary List
     * @param {FieldsApiFieldsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    fieldsList(requestParameters = {}, options) {
        return FieldsApiFp(this.configuration).fieldsList(requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * View for listing and adding moderators
     * @summary Field Moderators Create
     * @param {FieldsApiFieldsModeratorsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    fieldsModeratorsCreate(requestParameters, options) {
        return FieldsApiFp(this.configuration).fieldsModeratorsCreate(requestParameters.field_name, requestParameters.FieldModeratorRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove the user from the moderator groups for this website
     * @summary Field Moderators Destroy
     * @param {FieldsApiFieldsModeratorsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    fieldsModeratorsDestroy(requestParameters, options) {
        return FieldsApiFp(this.configuration).fieldsModeratorsDestroy(requestParameters.field_name, requestParameters.moderator_name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * View for listing and adding moderators
     * @summary Field Moderators List
     * @param {FieldsApiFieldsModeratorsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    fieldsModeratorsList(requestParameters, options) {
        return FieldsApiFp(this.configuration).fieldsModeratorsList(requestParameters.field_name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @summary Update
     * @param {FieldsApiFieldsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    fieldsPartialUpdate(requestParameters, options) {
        return FieldsApiFp(this.configuration).fieldsPartialUpdate(requestParameters.field_name, requestParameters.PatchedFieldChannelWriteRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @summary Retrieve
     * @param {FieldsApiFieldsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    fieldsRetrieve(requestParameters, options) {
        return FieldsApiFp(this.configuration).fieldsRetrieve(requestParameters.field_name, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * User retrieve and update viewsets for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeRetrieve: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/api/v0/users/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
    return {
        /**
         * User retrieve and update viewsets for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeRetrieve(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.usersMeRetrieve(options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = operationServerMap['UsersApi.usersMeRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = UsersApiFp(configuration);
    return {
        /**
         * User retrieve and update viewsets for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeRetrieve(options) {
            return localVarFp.usersMeRetrieve(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * User retrieve and update viewsets for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersMeRetrieve(options) {
        return UsersApiFp(this.configuration).usersMeRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=api.js.map