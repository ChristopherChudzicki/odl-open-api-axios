"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * MIT Open API
 * MIT public API
 *
 * The version of the OpenAPI document: 0.0.1 (v1)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoursesNewListPlatformEnum = exports.CoursesNewListOfferedByEnum = exports.CoursesNewListLevelEnum = exports.CoursesNewListDepartmentEnum = exports.CoursesListSortbyEnum = exports.CoursesListResourceTypeEnum = exports.CoursesListPlatformEnum = exports.CoursesListOfferedByEnum = exports.CoursesListLevelEnum = exports.CoursesListDepartmentEnum = exports.CoursesContentfilesListPlatformEnum = exports.CoursesContentfilesListOfferedByEnum = exports.CoursesApi = exports.CoursesApiFactory = exports.CoursesApiFp = exports.CoursesApiAxiosParamCreator = exports.CourseFeaturesApi = exports.CourseFeaturesApiFactory = exports.CourseFeaturesApiFp = exports.CourseFeaturesApiAxiosParamCreator = exports.ContentfilesListPlatformEnum = exports.ContentfilesListOfferedByEnum = exports.ContentfilesApi = exports.ContentfilesApiFactory = exports.ContentfilesApiFp = exports.ContentfilesApiAxiosParamCreator = exports.ContentFileSearchRetrieveSortbyEnum = exports.ContentFileSearchRetrievePlatformEnum = exports.ContentFileSearchRetrieveOfferedByEnum = exports.ContentFileSearchRetrieveAggregationsEnum = exports.ContentFileSearchApi = exports.ContentFileSearchApiFactory = exports.ContentFileSearchApiFp = exports.ContentFileSearchApiAxiosParamCreator = exports.ArticlesApi = exports.ArticlesApiFactory = exports.ArticlesApiFp = exports.ArticlesApiAxiosParamCreator = exports.VideoResourceResourceTypeEnum = exports.VideoPlaylistResourceResourceTypeEnum = exports.ResourceTypeEnum = exports.RelationTypeEnum = exports.ProgramResourceResourceTypeEnum = exports.PrivacyLevelEnum = exports.PodcastResourceResourceTypeEnum = exports.PodcastEpisodeResourceResourceTypeEnum = exports.LearningResourceRunLevelInnerCodeEnum = exports.LearningPathResourceResourceTypeEnum = exports.CourseResourceResourceTypeEnum = exports.ContentTypeEnum = void 0;
exports.LearningpathsApiFactory = exports.LearningpathsApiFp = exports.LearningpathsApiAxiosParamCreator = exports.LearningResourcesSearchRetrieveSortbyEnum = exports.LearningResourcesSearchRetrieveResourceTypeEnum = exports.LearningResourcesSearchRetrievePlatformEnum = exports.LearningResourcesSearchRetrieveOfferedByEnum = exports.LearningResourcesSearchRetrieveLevelEnum = exports.LearningResourcesSearchRetrieveDepartmentEnum = exports.LearningResourcesSearchRetrieveAggregationsEnum = exports.LearningResourcesSearchApi = exports.LearningResourcesSearchApiFactory = exports.LearningResourcesSearchApiFp = exports.LearningResourcesSearchApiAxiosParamCreator = exports.LearningResourcesUpcomingListSortbyEnum = exports.LearningResourcesUpcomingListResourceTypeEnum = exports.LearningResourcesUpcomingListPlatformEnum = exports.LearningResourcesUpcomingListOfferedByEnum = exports.LearningResourcesUpcomingListLevelEnum = exports.LearningResourcesUpcomingListDepartmentEnum = exports.LearningResourcesNewListSortbyEnum = exports.LearningResourcesNewListResourceTypeEnum = exports.LearningResourcesNewListPlatformEnum = exports.LearningResourcesNewListOfferedByEnum = exports.LearningResourcesNewListLevelEnum = exports.LearningResourcesNewListDepartmentEnum = exports.LearningResourcesListSortbyEnum = exports.LearningResourcesListResourceTypeEnum = exports.LearningResourcesListPlatformEnum = exports.LearningResourcesListOfferedByEnum = exports.LearningResourcesListLevelEnum = exports.LearningResourcesListDepartmentEnum = exports.LearningResourcesContentfilesListPlatformEnum = exports.LearningResourcesContentfilesListOfferedByEnum = exports.LearningResourcesApi = exports.LearningResourcesApiFactory = exports.LearningResourcesApiFp = exports.LearningResourcesApiAxiosParamCreator = exports.DepartmentsApi = exports.DepartmentsApiFactory = exports.DepartmentsApiFp = exports.DepartmentsApiAxiosParamCreator = exports.CoursesUpcomingListSortbyEnum = exports.CoursesUpcomingListResourceTypeEnum = exports.CoursesUpcomingListPlatformEnum = exports.CoursesUpcomingListOfferedByEnum = exports.CoursesUpcomingListLevelEnum = exports.CoursesUpcomingListDepartmentEnum = exports.CoursesNewListSortbyEnum = exports.CoursesNewListResourceTypeEnum = void 0;
exports.ProgramsNewListResourceTypeEnum = exports.ProgramsNewListPlatformEnum = exports.ProgramsNewListOfferedByEnum = exports.ProgramsNewListLevelEnum = exports.ProgramsNewListDepartmentEnum = exports.ProgramsListSortbyEnum = exports.ProgramsListResourceTypeEnum = exports.ProgramsListPlatformEnum = exports.ProgramsListOfferedByEnum = exports.ProgramsListLevelEnum = exports.ProgramsListDepartmentEnum = exports.ProgramsApi = exports.ProgramsApiFactory = exports.ProgramsApiFp = exports.ProgramsApiAxiosParamCreator = exports.PodcastsListSortbyEnum = exports.PodcastsListResourceTypeEnum = exports.PodcastsListPlatformEnum = exports.PodcastsListOfferedByEnum = exports.PodcastsListLevelEnum = exports.PodcastsListDepartmentEnum = exports.PodcastsApi = exports.PodcastsApiFactory = exports.PodcastsApiFp = exports.PodcastsApiAxiosParamCreator = exports.PodcastEpisodesListSortbyEnum = exports.PodcastEpisodesListResourceTypeEnum = exports.PodcastEpisodesListPlatformEnum = exports.PodcastEpisodesListOfferedByEnum = exports.PodcastEpisodesListLevelEnum = exports.PodcastEpisodesListDepartmentEnum = exports.PodcastEpisodesApi = exports.PodcastEpisodesApiFactory = exports.PodcastEpisodesApiFp = exports.PodcastEpisodesApiAxiosParamCreator = exports.PlatformsApi = exports.PlatformsApiFactory = exports.PlatformsApiFp = exports.PlatformsApiAxiosParamCreator = exports.OfferorsApi = exports.OfferorsApiFactory = exports.OfferorsApiFp = exports.OfferorsApiAxiosParamCreator = exports.LearningpathsListSortbyEnum = exports.LearningpathsListResourceTypeEnum = exports.LearningpathsListPlatformEnum = exports.LearningpathsListOfferedByEnum = exports.LearningpathsListLevelEnum = exports.LearningpathsListDepartmentEnum = exports.LearningpathsApi = void 0;
exports.VideosNewListOfferedByEnum = exports.VideosNewListLevelEnum = exports.VideosNewListDepartmentEnum = exports.VideosListSortbyEnum = exports.VideosListResourceTypeEnum = exports.VideosListPlatformEnum = exports.VideosListOfferedByEnum = exports.VideosListLevelEnum = exports.VideosListDepartmentEnum = exports.VideosApi = exports.VideosApiFactory = exports.VideosApiFp = exports.VideosApiAxiosParamCreator = exports.VideoPlaylistsUpcomingListSortbyEnum = exports.VideoPlaylistsUpcomingListResourceTypeEnum = exports.VideoPlaylistsUpcomingListPlatformEnum = exports.VideoPlaylistsUpcomingListOfferedByEnum = exports.VideoPlaylistsUpcomingListLevelEnum = exports.VideoPlaylistsUpcomingListDepartmentEnum = exports.VideoPlaylistsNewListSortbyEnum = exports.VideoPlaylistsNewListResourceTypeEnum = exports.VideoPlaylistsNewListPlatformEnum = exports.VideoPlaylistsNewListOfferedByEnum = exports.VideoPlaylistsNewListLevelEnum = exports.VideoPlaylistsNewListDepartmentEnum = exports.VideoPlaylistsListSortbyEnum = exports.VideoPlaylistsListResourceTypeEnum = exports.VideoPlaylistsListPlatformEnum = exports.VideoPlaylistsListOfferedByEnum = exports.VideoPlaylistsListLevelEnum = exports.VideoPlaylistsListDepartmentEnum = exports.VideoPlaylistsApi = exports.VideoPlaylistsApiFactory = exports.VideoPlaylistsApiFp = exports.VideoPlaylistsApiAxiosParamCreator = exports.UserlistsApi = exports.UserlistsApiFactory = exports.UserlistsApiFp = exports.UserlistsApiAxiosParamCreator = exports.TopicsApi = exports.TopicsApiFactory = exports.TopicsApiFp = exports.TopicsApiAxiosParamCreator = exports.ProgramsUpcomingListSortbyEnum = exports.ProgramsUpcomingListResourceTypeEnum = exports.ProgramsUpcomingListPlatformEnum = exports.ProgramsUpcomingListOfferedByEnum = exports.ProgramsUpcomingListLevelEnum = exports.ProgramsUpcomingListDepartmentEnum = exports.ProgramsNewListSortbyEnum = void 0;
exports.VideosUpcomingListSortbyEnum = exports.VideosUpcomingListResourceTypeEnum = exports.VideosUpcomingListPlatformEnum = exports.VideosUpcomingListOfferedByEnum = exports.VideosUpcomingListLevelEnum = exports.VideosUpcomingListDepartmentEnum = exports.VideosNewListSortbyEnum = exports.VideosNewListResourceTypeEnum = exports.VideosNewListPlatformEnum = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * * `page` - page * `file` - file * `vertical` - vertical
 * @export
 * @enum {string}
 */
exports.ContentTypeEnum = {
    Page: 'page',
    File: 'file',
    Vertical: 'vertical'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.CourseResourceResourceTypeEnum = {
    Course: 'course'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.LearningPathResourceResourceTypeEnum = {
    LearningPath: 'learning_path'
};
exports.LearningResourceRunLevelInnerCodeEnum = {
    Undergraduate: 'undergraduate',
    Graduate: 'graduate',
    HighSchool: 'high_school',
    Noncredit: 'noncredit',
    Advanced: 'advanced',
    Intermediate: 'intermediate',
    Introductory: 'introductory'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.PodcastEpisodeResourceResourceTypeEnum = {
    PodcastEpisode: 'podcast_episode'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.PodcastResourceResourceTypeEnum = {
    Podcast: 'podcast'
};
/**
 * * `private` - private * `unlisted` - unlisted
 * @export
 * @enum {string}
 */
exports.PrivacyLevelEnum = {
    Private: 'private',
    Unlisted: 'unlisted'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.ProgramResourceResourceTypeEnum = {
    Program: 'program'
};
/**
 * * `PROGRAM_COURSES` - Program Courses * `LEARNING_PATH_ITEMS` - Learning Path Items * `PODCAST_EPISODES` - Podcast Episodes * `PLAYLIST_VIDEOS` - Playlist Videos
 * @export
 * @enum {string}
 */
exports.RelationTypeEnum = {
    ProgramCourses: 'PROGRAM_COURSES',
    LearningPathItems: 'LEARNING_PATH_ITEMS',
    PodcastEpisodes: 'PODCAST_EPISODES',
    PlaylistVideos: 'PLAYLIST_VIDEOS'
};
/**
 * * `course` - course * `program` - program * `learning_path` - learning_path * `podcast` - podcast * `podcast_episode` - podcast_episode * `video` - video * `video_playlist` - video_playlist
 * @export
 * @enum {string}
 */
exports.ResourceTypeEnum = {
    Course: 'course',
    Program: 'program',
    LearningPath: 'learning_path',
    Podcast: 'podcast',
    PodcastEpisode: 'podcast_episode',
    Video: 'video',
    VideoPlaylist: 'video_playlist'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.VideoPlaylistResourceResourceTypeEnum = {
    VideoPlaylist: 'video_playlist'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.VideoResourceResourceTypeEnum = {
    Video: 'video'
};
/**
 * ArticlesApi - axios parameter creator
 * @export
 */
const ArticlesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a new article
         * @summary Create
         * @param {ArticleRequest} ArticleRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesCreate: (ArticleRequest_1, ...args_1) => __awaiter(this, [ArticleRequest_1, ...args_1], void 0, function* (ArticleRequest, options = {}) {
            // verify required parameter 'ArticleRequest' is not null or undefined
            (0, common_1.assertParamExists)('articlesCreate', 'ArticleRequest', ArticleRequest);
            const localVarPath = `/api/v1/articles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(ArticleRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an article
         * @summary Destroy
         * @param {number} id A unique integer value identifying this article.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesDestroy: (id_1, ...args_2) => __awaiter(this, [id_1, ...args_2], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('articlesDestroy', 'id', id);
            const localVarPath = `/api/v1/articles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a paginated list of articles
         * @summary List
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesList: (limit_1, offset_1, ...args_3) => __awaiter(this, [limit_1, offset_1, ...args_3], void 0, function* (limit, offset, options = {}) {
            const localVarPath = `/api/v1/articles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update an article
         * @summary Update
         * @param {number} id A unique integer value identifying this article.
         * @param {PatchedArticleRequest} [PatchedArticleRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesPartialUpdate: (id_2, PatchedArticleRequest_1, ...args_4) => __awaiter(this, [id_2, PatchedArticleRequest_1, ...args_4], void 0, function* (id, PatchedArticleRequest, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('articlesPartialUpdate', 'id', id);
            const localVarPath = `/api/v1/articles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(PatchedArticleRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve a single article
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this article.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesRetrieve: (id_3, ...args_5) => __awaiter(this, [id_3, ...args_5], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('articlesRetrieve', 'id', id);
            const localVarPath = `/api/v1/articles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ArticlesApiAxiosParamCreator = ArticlesApiAxiosParamCreator;
/**
 * ArticlesApi - functional programming interface
 * @export
 */
const ArticlesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ArticlesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Create a new article
         * @summary Create
         * @param {ArticleRequest} ArticleRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesCreate(ArticleRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.articlesCreate(ArticleRequest, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['ArticlesApi.articlesCreate']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Delete an article
         * @summary Destroy
         * @param {number} id A unique integer value identifying this article.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesDestroy(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.articlesDestroy(id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['ArticlesApi.articlesDestroy']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Get a paginated list of articles
         * @summary List
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesList(limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.articlesList(limit, offset, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['ArticlesApi.articlesList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Update an article
         * @summary Update
         * @param {number} id A unique integer value identifying this article.
         * @param {PatchedArticleRequest} [PatchedArticleRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesPartialUpdate(id, PatchedArticleRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.articlesPartialUpdate(id, PatchedArticleRequest, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['ArticlesApi.articlesPartialUpdate']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Retrieve a single article
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this article.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesRetrieve(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.articlesRetrieve(id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['ArticlesApi.articlesRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
exports.ArticlesApiFp = ArticlesApiFp;
/**
 * ArticlesApi - factory interface
 * @export
 */
const ArticlesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ArticlesApiFp)(configuration);
    return {
        /**
         * Create a new article
         * @summary Create
         * @param {ArticlesApiArticlesCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesCreate(requestParameters, options) {
            return localVarFp.articlesCreate(requestParameters.ArticleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an article
         * @summary Destroy
         * @param {ArticlesApiArticlesDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesDestroy(requestParameters, options) {
            return localVarFp.articlesDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of articles
         * @summary List
         * @param {ArticlesApiArticlesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesList(requestParameters = {}, options) {
            return localVarFp.articlesList(requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an article
         * @summary Update
         * @param {ArticlesApiArticlesPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesPartialUpdate(requestParameters, options) {
            return localVarFp.articlesPartialUpdate(requestParameters.id, requestParameters.PatchedArticleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single article
         * @summary Retrieve
         * @param {ArticlesApiArticlesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesRetrieve(requestParameters, options) {
            return localVarFp.articlesRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ArticlesApiFactory = ArticlesApiFactory;
/**
 * ArticlesApi - object-oriented interface
 * @export
 * @class ArticlesApi
 * @extends {BaseAPI}
 */
class ArticlesApi extends base_1.BaseAPI {
    /**
     * Create a new article
     * @summary Create
     * @param {ArticlesApiArticlesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    articlesCreate(requestParameters, options) {
        return (0, exports.ArticlesApiFp)(this.configuration).articlesCreate(requestParameters.ArticleRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an article
     * @summary Destroy
     * @param {ArticlesApiArticlesDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    articlesDestroy(requestParameters, options) {
        return (0, exports.ArticlesApiFp)(this.configuration).articlesDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a paginated list of articles
     * @summary List
     * @param {ArticlesApiArticlesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    articlesList(requestParameters = {}, options) {
        return (0, exports.ArticlesApiFp)(this.configuration).articlesList(requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an article
     * @summary Update
     * @param {ArticlesApiArticlesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    articlesPartialUpdate(requestParameters, options) {
        return (0, exports.ArticlesApiFp)(this.configuration).articlesPartialUpdate(requestParameters.id, requestParameters.PatchedArticleRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a single article
     * @summary Retrieve
     * @param {ArticlesApiArticlesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    articlesRetrieve(requestParameters, options) {
        return (0, exports.ArticlesApiFp)(this.configuration).articlesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ArticlesApi = ArticlesApi;
/**
 * ContentFileSearchApi - axios parameter creator
 * @export
 */
const ContentFileSearchApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Search for content files
         * @summary Search
         * @param {Array<ContentFileSearchRetrieveAggregationsEnum>} [aggregations] Show resource counts by category
         * @param {Array<string>} [content_feature_type] The feature type of the content file. Possible options are at api/v1/course_features/
         * @param {Array<number>} [id] The id value for the content file
         * @param {number} [limit] Number of results to return per page
         * @param {Array<ContentFileSearchRetrieveOfferedByEnum>} [offered_by] The organization that offers the learning resource               * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results
         * @param {Array<ContentFileSearchRetrievePlatformEnum>} [platform] The platform on which the learning resource id offered               * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {string} [q] The search text
         * @param {Array<number>} [resource_id] The id value of the parent learning resource for the content file
         * @param {Array<number>} [run_id] The id value of the run that the content file belongs to
         * @param {ContentFileSearchRetrieveSortbyEnum} [sortby] if the parameter starts with \&#39;-\&#39; the sort is in descending order  * &#x60;id&#x60; - id * &#x60;-id&#x60; - -id * &#x60;resource_readable_id&#x60; - resource_readable_id * &#x60;-resource_readable_id&#x60; - -resource_readable_id
         * @param {Array<string>} [topic] The topic name. To see a list of options go to api/v1/topics/
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentFileSearchRetrieve: (aggregations_1, content_feature_type_1, id_1, limit_1, offered_by_1, offset_1, platform_1, q_1, resource_id_1, run_id_1, sortby_1, topic_1, ...args_1) => __awaiter(this, [aggregations_1, content_feature_type_1, id_1, limit_1, offered_by_1, offset_1, platform_1, q_1, resource_id_1, run_id_1, sortby_1, topic_1, ...args_1], void 0, function* (aggregations, content_feature_type, id, limit, offered_by, offset, platform, q, resource_id, run_id, sortby, topic, options = {}) {
            const localVarPath = `/api/v1/content_file_search/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (aggregations) {
                localVarQueryParameter['aggregations'] = aggregations;
            }
            if (content_feature_type) {
                localVarQueryParameter['content_feature_type'] = content_feature_type;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (resource_id) {
                localVarQueryParameter['resource_id'] = resource_id;
            }
            if (run_id) {
                localVarQueryParameter['run_id'] = run_id;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            if (topic) {
                localVarQueryParameter['topic'] = topic;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ContentFileSearchApiAxiosParamCreator = ContentFileSearchApiAxiosParamCreator;
/**
 * ContentFileSearchApi - functional programming interface
 * @export
 */
const ContentFileSearchApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ContentFileSearchApiAxiosParamCreator)(configuration);
    return {
        /**
         * Search for content files
         * @summary Search
         * @param {Array<ContentFileSearchRetrieveAggregationsEnum>} [aggregations] Show resource counts by category
         * @param {Array<string>} [content_feature_type] The feature type of the content file. Possible options are at api/v1/course_features/
         * @param {Array<number>} [id] The id value for the content file
         * @param {number} [limit] Number of results to return per page
         * @param {Array<ContentFileSearchRetrieveOfferedByEnum>} [offered_by] The organization that offers the learning resource               * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results
         * @param {Array<ContentFileSearchRetrievePlatformEnum>} [platform] The platform on which the learning resource id offered               * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {string} [q] The search text
         * @param {Array<number>} [resource_id] The id value of the parent learning resource for the content file
         * @param {Array<number>} [run_id] The id value of the run that the content file belongs to
         * @param {ContentFileSearchRetrieveSortbyEnum} [sortby] if the parameter starts with \&#39;-\&#39; the sort is in descending order  * &#x60;id&#x60; - id * &#x60;-id&#x60; - -id * &#x60;resource_readable_id&#x60; - resource_readable_id * &#x60;-resource_readable_id&#x60; - -resource_readable_id
         * @param {Array<string>} [topic] The topic name. To see a list of options go to api/v1/topics/
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentFileSearchRetrieve(aggregations, content_feature_type, id, limit, offered_by, offset, platform, q, resource_id, run_id, sortby, topic, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.contentFileSearchRetrieve(aggregations, content_feature_type, id, limit, offered_by, offset, platform, q, resource_id, run_id, sortby, topic, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['ContentFileSearchApi.contentFileSearchRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
exports.ContentFileSearchApiFp = ContentFileSearchApiFp;
/**
 * ContentFileSearchApi - factory interface
 * @export
 */
const ContentFileSearchApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ContentFileSearchApiFp)(configuration);
    return {
        /**
         * Search for content files
         * @summary Search
         * @param {ContentFileSearchApiContentFileSearchRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentFileSearchRetrieve(requestParameters = {}, options) {
            return localVarFp.contentFileSearchRetrieve(requestParameters.aggregations, requestParameters.content_feature_type, requestParameters.id, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.q, requestParameters.resource_id, requestParameters.run_id, requestParameters.sortby, requestParameters.topic, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ContentFileSearchApiFactory = ContentFileSearchApiFactory;
/**
 * ContentFileSearchApi - object-oriented interface
 * @export
 * @class ContentFileSearchApi
 * @extends {BaseAPI}
 */
class ContentFileSearchApi extends base_1.BaseAPI {
    /**
     * Search for content files
     * @summary Search
     * @param {ContentFileSearchApiContentFileSearchRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentFileSearchApi
     */
    contentFileSearchRetrieve(requestParameters = {}, options) {
        return (0, exports.ContentFileSearchApiFp)(this.configuration).contentFileSearchRetrieve(requestParameters.aggregations, requestParameters.content_feature_type, requestParameters.id, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.q, requestParameters.resource_id, requestParameters.run_id, requestParameters.sortby, requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ContentFileSearchApi = ContentFileSearchApi;
/**
 * @export
 */
exports.ContentFileSearchRetrieveAggregationsEnum = {
    Topic: 'topic',
    ContentFeatureType: 'content_feature_type',
    Platform: 'platform',
    OfferedBy: 'offered_by'
};
/**
 * @export
 */
exports.ContentFileSearchRetrieveOfferedByEnum = {
    Mitx: 'mitx',
    Ocw: 'ocw',
    Bootcamps: 'bootcamps',
    Xpro: 'xpro',
    Csail: 'csail',
    Mitpe: 'mitpe',
    See: 'see',
    Scc: 'scc',
    Ctl: 'ctl'
};
/**
 * @export
 */
exports.ContentFileSearchRetrievePlatformEnum = {
    Edx: 'edx',
    Ocw: 'ocw',
    Oll: 'oll',
    Mitxonline: 'mitxonline',
    Bootcamps: 'bootcamps',
    Xpro: 'xpro',
    Csail: 'csail',
    Mitpe: 'mitpe',
    See: 'see',
    Scc: 'scc',
    Ctl: 'ctl',
    Whu: 'whu',
    Susskind: 'susskind',
    Globalalumni: 'globalalumni',
    Simplilearn: 'simplilearn',
    Emeritus: 'emeritus',
    Podcast: 'podcast',
    Youtube: 'youtube'
};
/**
 * @export
 */
exports.ContentFileSearchRetrieveSortbyEnum = {
    Id: 'id',
    Id2: '-id',
    ResourceReadableId: 'resource_readable_id',
    ResourceReadableId2: '-resource_readable_id'
};
/**
 * ContentfilesApi - axios parameter creator
 * @export
 */
const ContentfilesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Viewset for ContentFiles
         * @summary List
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {Array<string>} [content_feature_type] Multiple values may be separated by commas.
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<ContentfilesListOfferedByEnum>} [offered_by] The organization that offers a learning resource the content file belongs to  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<ContentfilesListPlatformEnum>} [platform] The platform on which learning resources the content file belongs to is offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {Array<number>} [resource_id] Multiple values may be separated by commas.
         * @param {Array<number>} [run_id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentfilesList: (learning_resource_id_1, content_feature_type_1, limit_1, offered_by_1, offset_1, platform_1, resource_id_1, run_id_1, ...args_1) => __awaiter(this, [learning_resource_id_1, content_feature_type_1, limit_1, offered_by_1, offset_1, platform_1, resource_id_1, run_id_1, ...args_1], void 0, function* (learning_resource_id, content_feature_type, limit, offered_by, offset, platform, resource_id, run_id, options = {}) {
            // verify required parameter 'learning_resource_id' is not null or undefined
            (0, common_1.assertParamExists)('contentfilesList', 'learning_resource_id', learning_resource_id);
            const localVarPath = `/api/v1/contentfiles/`
                .replace(`{${"learning_resource_id"}}`, encodeURIComponent(String(learning_resource_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (content_feature_type) {
                localVarQueryParameter['content_feature_type'] = content_feature_type.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (resource_id) {
                localVarQueryParameter['resource_id'] = resource_id.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (run_id) {
                localVarQueryParameter['run_id'] = run_id.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Viewset for ContentFiles
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this contentfile.
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentfilesRetrieve: (id_1, learning_resource_id_2, ...args_2) => __awaiter(this, [id_1, learning_resource_id_2, ...args_2], void 0, function* (id, learning_resource_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('contentfilesRetrieve', 'id', id);
            // verify required parameter 'learning_resource_id' is not null or undefined
            (0, common_1.assertParamExists)('contentfilesRetrieve', 'learning_resource_id', learning_resource_id);
            const localVarPath = `/api/v1/contentfiles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"learning_resource_id"}}`, encodeURIComponent(String(learning_resource_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ContentfilesApiAxiosParamCreator = ContentfilesApiAxiosParamCreator;
/**
 * ContentfilesApi - functional programming interface
 * @export
 */
const ContentfilesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ContentfilesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Viewset for ContentFiles
         * @summary List
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {Array<string>} [content_feature_type] Multiple values may be separated by commas.
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<ContentfilesListOfferedByEnum>} [offered_by] The organization that offers a learning resource the content file belongs to  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<ContentfilesListPlatformEnum>} [platform] The platform on which learning resources the content file belongs to is offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {Array<number>} [resource_id] Multiple values may be separated by commas.
         * @param {Array<number>} [run_id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentfilesList(learning_resource_id, content_feature_type, limit, offered_by, offset, platform, resource_id, run_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.contentfilesList(learning_resource_id, content_feature_type, limit, offered_by, offset, platform, resource_id, run_id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['ContentfilesApi.contentfilesList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Viewset for ContentFiles
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this contentfile.
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentfilesRetrieve(id, learning_resource_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.contentfilesRetrieve(id, learning_resource_id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['ContentfilesApi.contentfilesRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
exports.ContentfilesApiFp = ContentfilesApiFp;
/**
 * ContentfilesApi - factory interface
 * @export
 */
const ContentfilesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ContentfilesApiFp)(configuration);
    return {
        /**
         * Viewset for ContentFiles
         * @summary List
         * @param {ContentfilesApiContentfilesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentfilesList(requestParameters, options) {
            return localVarFp.contentfilesList(requestParameters.learning_resource_id, requestParameters.content_feature_type, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.resource_id, requestParameters.run_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for ContentFiles
         * @summary Retrieve
         * @param {ContentfilesApiContentfilesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentfilesRetrieve(requestParameters, options) {
            return localVarFp.contentfilesRetrieve(requestParameters.id, requestParameters.learning_resource_id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ContentfilesApiFactory = ContentfilesApiFactory;
/**
 * ContentfilesApi - object-oriented interface
 * @export
 * @class ContentfilesApi
 * @extends {BaseAPI}
 */
class ContentfilesApi extends base_1.BaseAPI {
    /**
     * Viewset for ContentFiles
     * @summary List
     * @param {ContentfilesApiContentfilesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentfilesApi
     */
    contentfilesList(requestParameters, options) {
        return (0, exports.ContentfilesApiFp)(this.configuration).contentfilesList(requestParameters.learning_resource_id, requestParameters.content_feature_type, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.resource_id, requestParameters.run_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Viewset for ContentFiles
     * @summary Retrieve
     * @param {ContentfilesApiContentfilesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentfilesApi
     */
    contentfilesRetrieve(requestParameters, options) {
        return (0, exports.ContentfilesApiFp)(this.configuration).contentfilesRetrieve(requestParameters.id, requestParameters.learning_resource_id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ContentfilesApi = ContentfilesApi;
/**
 * @export
 */
exports.ContentfilesListOfferedByEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Mitpe: 'mitpe',
    Mitx: 'mitx',
    Ocw: 'ocw',
    Scc: 'scc',
    See: 'see',
    Xpro: 'xpro'
};
/**
 * @export
 */
exports.ContentfilesListPlatformEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Edx: 'edx',
    Emeritus: 'emeritus',
    Globalalumni: 'globalalumni',
    Mitpe: 'mitpe',
    Mitxonline: 'mitxonline',
    Ocw: 'ocw',
    Oll: 'oll',
    Podcast: 'podcast',
    Scc: 'scc',
    See: 'see',
    Simplilearn: 'simplilearn',
    Susskind: 'susskind',
    Whu: 'whu',
    Xpro: 'xpro',
    Youtube: 'youtube'
};
/**
 * CourseFeaturesApi - axios parameter creator
 * @export
 */
const CourseFeaturesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Course Features and Content Feature Types
         * @summary List
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseFeaturesList: (limit_1, offset_1, ...args_1) => __awaiter(this, [limit_1, offset_1, ...args_1], void 0, function* (limit, offset, options = {}) {
            const localVarPath = `/api/v1/course_features/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Course Features and Content Feature Types
         * @summary Retrieve
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseFeaturesRetrieve: (id_1, ...args_2) => __awaiter(this, [id_1, ...args_2], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('courseFeaturesRetrieve', 'id', id);
            const localVarPath = `/api/v1/course_features/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.CourseFeaturesApiAxiosParamCreator = CourseFeaturesApiAxiosParamCreator;
/**
 * CourseFeaturesApi - functional programming interface
 * @export
 */
const CourseFeaturesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.CourseFeaturesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Course Features and Content Feature Types
         * @summary List
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseFeaturesList(limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.courseFeaturesList(limit, offset, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['CourseFeaturesApi.courseFeaturesList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Course Features and Content Feature Types
         * @summary Retrieve
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseFeaturesRetrieve(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.courseFeaturesRetrieve(id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['CourseFeaturesApi.courseFeaturesRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
exports.CourseFeaturesApiFp = CourseFeaturesApiFp;
/**
 * CourseFeaturesApi - factory interface
 * @export
 */
const CourseFeaturesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.CourseFeaturesApiFp)(configuration);
    return {
        /**
         * Course Features and Content Feature Types
         * @summary List
         * @param {CourseFeaturesApiCourseFeaturesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseFeaturesList(requestParameters = {}, options) {
            return localVarFp.courseFeaturesList(requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Course Features and Content Feature Types
         * @summary Retrieve
         * @param {CourseFeaturesApiCourseFeaturesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseFeaturesRetrieve(requestParameters, options) {
            return localVarFp.courseFeaturesRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.CourseFeaturesApiFactory = CourseFeaturesApiFactory;
/**
 * CourseFeaturesApi - object-oriented interface
 * @export
 * @class CourseFeaturesApi
 * @extends {BaseAPI}
 */
class CourseFeaturesApi extends base_1.BaseAPI {
    /**
     * Course Features and Content Feature Types
     * @summary List
     * @param {CourseFeaturesApiCourseFeaturesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseFeaturesApi
     */
    courseFeaturesList(requestParameters = {}, options) {
        return (0, exports.CourseFeaturesApiFp)(this.configuration).courseFeaturesList(requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Course Features and Content Feature Types
     * @summary Retrieve
     * @param {CourseFeaturesApiCourseFeaturesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseFeaturesApi
     */
    courseFeaturesRetrieve(requestParameters, options) {
        return (0, exports.CourseFeaturesApiFp)(this.configuration).courseFeaturesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CourseFeaturesApi = CourseFeaturesApi;
/**
 * CoursesApi - axios parameter creator
 * @export
 */
const CoursesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Show content files for a learning resource
         * @summary Learning Resource Content File List
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {Array<string>} [content_feature_type] Multiple values may be separated by commas.
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<CoursesContentfilesListOfferedByEnum>} [offered_by] The organization that offers a learning resource the content file belongs to  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<CoursesContentfilesListPlatformEnum>} [platform] The platform on which learning resources the content file belongs to is offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {Array<number>} [resource_id] Multiple values may be separated by commas.
         * @param {Array<number>} [run_id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesContentfilesList: (learning_resource_id_1, content_feature_type_1, limit_1, offered_by_1, offset_1, platform_1, resource_id_1, run_id_1, ...args_1) => __awaiter(this, [learning_resource_id_1, content_feature_type_1, limit_1, offered_by_1, offset_1, platform_1, resource_id_1, run_id_1, ...args_1], void 0, function* (learning_resource_id, content_feature_type, limit, offered_by, offset, platform, resource_id, run_id, options = {}) {
            // verify required parameter 'learning_resource_id' is not null or undefined
            (0, common_1.assertParamExists)('coursesContentfilesList', 'learning_resource_id', learning_resource_id);
            const localVarPath = `/api/v1/courses/{learning_resource_id}/contentfiles/`
                .replace(`{${"learning_resource_id"}}`, encodeURIComponent(String(learning_resource_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (content_feature_type) {
                localVarQueryParameter['content_feature_type'] = content_feature_type.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (resource_id) {
                localVarQueryParameter['resource_id'] = resource_id.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (run_id) {
                localVarQueryParameter['run_id'] = run_id.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Show content files for a learning resource
         * @summary Learning Resource Content File Retrieve
         * @param {number} id A unique integer value identifying this contentfile.
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesContentfilesRetrieve: (id_1, learning_resource_id_2, ...args_2) => __awaiter(this, [id_1, learning_resource_id_2, ...args_2], void 0, function* (id, learning_resource_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('coursesContentfilesRetrieve', 'id', id);
            // verify required parameter 'learning_resource_id' is not null or undefined
            (0, common_1.assertParamExists)('coursesContentfilesRetrieve', 'learning_resource_id', learning_resource_id);
            const localVarPath = `/api/v1/courses/{learning_resource_id}/contentfiles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"learning_resource_id"}}`, encodeURIComponent(String(learning_resource_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a paginated list of courses
         * @summary List
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<CoursesListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<CoursesListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<CoursesListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<CoursesListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<CoursesListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {CoursesListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesList: (course_feature_1, department_1, level_1, limit_2, offered_by_2, offset_2, platform_2, professional_1, resource_type_1, sortby_1, topic_1, ...args_3) => __awaiter(this, [course_feature_1, department_1, level_1, limit_2, offered_by_2, offset_2, platform_2, professional_1, resource_type_1, sortby_1, topic_1, ...args_3], void 0, function* (course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options = {}) {
            const localVarPath = `/api/v1/courses/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (course_feature) {
                localVarQueryParameter['course_feature'] = course_feature.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (department) {
                localVarQueryParameter['department'] = department;
            }
            if (level) {
                localVarQueryParameter['level'] = level;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (professional !== undefined) {
                localVarQueryParameter['professional'] = professional;
            }
            if (resource_type) {
                localVarQueryParameter['resource_type'] = resource_type;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            if (topic) {
                localVarQueryParameter['topic'] = topic.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a paginated list of newly released Courses.
         * @summary List New
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<CoursesNewListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<CoursesNewListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<CoursesNewListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<CoursesNewListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<CoursesNewListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {CoursesNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesNewList: (course_feature_2, department_2, level_2, limit_3, offered_by_3, offset_3, platform_3, professional_2, resource_type_2, sortby_2, topic_2, ...args_4) => __awaiter(this, [course_feature_2, department_2, level_2, limit_3, offered_by_3, offset_3, platform_3, professional_2, resource_type_2, sortby_2, topic_2, ...args_4], void 0, function* (course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options = {}) {
            const localVarPath = `/api/v1/courses/new/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (course_feature) {
                localVarQueryParameter['course_feature'] = course_feature.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (department) {
                localVarQueryParameter['department'] = department;
            }
            if (level) {
                localVarQueryParameter['level'] = level;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (professional !== undefined) {
                localVarQueryParameter['professional'] = professional;
            }
            if (resource_type) {
                localVarQueryParameter['resource_type'] = resource_type;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            if (topic) {
                localVarQueryParameter['topic'] = topic.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve a single course
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesRetrieve: (id_2, ...args_5) => __awaiter(this, [id_2, ...args_5], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('coursesRetrieve', 'id', id);
            const localVarPath = `/api/v1/courses/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a paginated list of upcoming Courses.
         * @summary List Upcoming
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<CoursesUpcomingListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<CoursesUpcomingListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<CoursesUpcomingListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<CoursesUpcomingListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<CoursesUpcomingListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {CoursesUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesUpcomingList: (course_feature_3, department_3, level_3, limit_4, offered_by_4, offset_4, platform_4, professional_3, resource_type_3, sortby_3, topic_3, ...args_6) => __awaiter(this, [course_feature_3, department_3, level_3, limit_4, offered_by_4, offset_4, platform_4, professional_3, resource_type_3, sortby_3, topic_3, ...args_6], void 0, function* (course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options = {}) {
            const localVarPath = `/api/v1/courses/upcoming/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (course_feature) {
                localVarQueryParameter['course_feature'] = course_feature.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (department) {
                localVarQueryParameter['department'] = department;
            }
            if (level) {
                localVarQueryParameter['level'] = level;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (professional !== undefined) {
                localVarQueryParameter['professional'] = professional;
            }
            if (resource_type) {
                localVarQueryParameter['resource_type'] = resource_type;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            if (topic) {
                localVarQueryParameter['topic'] = topic.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.CoursesApiAxiosParamCreator = CoursesApiAxiosParamCreator;
/**
 * CoursesApi - functional programming interface
 * @export
 */
const CoursesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.CoursesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Show content files for a learning resource
         * @summary Learning Resource Content File List
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {Array<string>} [content_feature_type] Multiple values may be separated by commas.
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<CoursesContentfilesListOfferedByEnum>} [offered_by] The organization that offers a learning resource the content file belongs to  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<CoursesContentfilesListPlatformEnum>} [platform] The platform on which learning resources the content file belongs to is offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {Array<number>} [resource_id] Multiple values may be separated by commas.
         * @param {Array<number>} [run_id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesContentfilesList(learning_resource_id, content_feature_type, limit, offered_by, offset, platform, resource_id, run_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.coursesContentfilesList(learning_resource_id, content_feature_type, limit, offered_by, offset, platform, resource_id, run_id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['CoursesApi.coursesContentfilesList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Show content files for a learning resource
         * @summary Learning Resource Content File Retrieve
         * @param {number} id A unique integer value identifying this contentfile.
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesContentfilesRetrieve(id, learning_resource_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.coursesContentfilesRetrieve(id, learning_resource_id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['CoursesApi.coursesContentfilesRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Get a paginated list of courses
         * @summary List
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<CoursesListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<CoursesListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<CoursesListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<CoursesListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<CoursesListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {CoursesListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.coursesList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['CoursesApi.coursesList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Get a paginated list of newly released Courses.
         * @summary List New
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<CoursesNewListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<CoursesNewListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<CoursesNewListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<CoursesNewListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<CoursesNewListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {CoursesNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesNewList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.coursesNewList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['CoursesApi.coursesNewList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Retrieve a single course
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesRetrieve(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.coursesRetrieve(id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['CoursesApi.coursesRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Get a paginated list of upcoming Courses.
         * @summary List Upcoming
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<CoursesUpcomingListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<CoursesUpcomingListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<CoursesUpcomingListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<CoursesUpcomingListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<CoursesUpcomingListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {CoursesUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesUpcomingList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.coursesUpcomingList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['CoursesApi.coursesUpcomingList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
exports.CoursesApiFp = CoursesApiFp;
/**
 * CoursesApi - factory interface
 * @export
 */
const CoursesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.CoursesApiFp)(configuration);
    return {
        /**
         * Show content files for a learning resource
         * @summary Learning Resource Content File List
         * @param {CoursesApiCoursesContentfilesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesContentfilesList(requestParameters, options) {
            return localVarFp.coursesContentfilesList(requestParameters.learning_resource_id, requestParameters.content_feature_type, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.resource_id, requestParameters.run_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Show content files for a learning resource
         * @summary Learning Resource Content File Retrieve
         * @param {CoursesApiCoursesContentfilesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesContentfilesRetrieve(requestParameters, options) {
            return localVarFp.coursesContentfilesRetrieve(requestParameters.id, requestParameters.learning_resource_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of courses
         * @summary List
         * @param {CoursesApiCoursesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesList(requestParameters = {}, options) {
            return localVarFp.coursesList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of newly released Courses.
         * @summary List New
         * @param {CoursesApiCoursesNewListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesNewList(requestParameters = {}, options) {
            return localVarFp.coursesNewList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single course
         * @summary Retrieve
         * @param {CoursesApiCoursesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesRetrieve(requestParameters, options) {
            return localVarFp.coursesRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of upcoming Courses.
         * @summary List Upcoming
         * @param {CoursesApiCoursesUpcomingListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesUpcomingList(requestParameters = {}, options) {
            return localVarFp.coursesUpcomingList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(axios, basePath));
        },
    };
};
exports.CoursesApiFactory = CoursesApiFactory;
/**
 * CoursesApi - object-oriented interface
 * @export
 * @class CoursesApi
 * @extends {BaseAPI}
 */
class CoursesApi extends base_1.BaseAPI {
    /**
     * Show content files for a learning resource
     * @summary Learning Resource Content File List
     * @param {CoursesApiCoursesContentfilesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    coursesContentfilesList(requestParameters, options) {
        return (0, exports.CoursesApiFp)(this.configuration).coursesContentfilesList(requestParameters.learning_resource_id, requestParameters.content_feature_type, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.resource_id, requestParameters.run_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Show content files for a learning resource
     * @summary Learning Resource Content File Retrieve
     * @param {CoursesApiCoursesContentfilesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    coursesContentfilesRetrieve(requestParameters, options) {
        return (0, exports.CoursesApiFp)(this.configuration).coursesContentfilesRetrieve(requestParameters.id, requestParameters.learning_resource_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a paginated list of courses
     * @summary List
     * @param {CoursesApiCoursesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    coursesList(requestParameters = {}, options) {
        return (0, exports.CoursesApiFp)(this.configuration).coursesList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a paginated list of newly released Courses.
     * @summary List New
     * @param {CoursesApiCoursesNewListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    coursesNewList(requestParameters = {}, options) {
        return (0, exports.CoursesApiFp)(this.configuration).coursesNewList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a single course
     * @summary Retrieve
     * @param {CoursesApiCoursesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    coursesRetrieve(requestParameters, options) {
        return (0, exports.CoursesApiFp)(this.configuration).coursesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a paginated list of upcoming Courses.
     * @summary List Upcoming
     * @param {CoursesApiCoursesUpcomingListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    coursesUpcomingList(requestParameters = {}, options) {
        return (0, exports.CoursesApiFp)(this.configuration).coursesUpcomingList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CoursesApi = CoursesApi;
/**
 * @export
 */
exports.CoursesContentfilesListOfferedByEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Mitpe: 'mitpe',
    Mitx: 'mitx',
    Ocw: 'ocw',
    Scc: 'scc',
    See: 'see',
    Xpro: 'xpro'
};
/**
 * @export
 */
exports.CoursesContentfilesListPlatformEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Edx: 'edx',
    Emeritus: 'emeritus',
    Globalalumni: 'globalalumni',
    Mitpe: 'mitpe',
    Mitxonline: 'mitxonline',
    Ocw: 'ocw',
    Oll: 'oll',
    Podcast: 'podcast',
    Scc: 'scc',
    See: 'see',
    Simplilearn: 'simplilearn',
    Susskind: 'susskind',
    Whu: 'whu',
    Xpro: 'xpro',
    Youtube: 'youtube'
};
/**
 * @export
 */
exports.CoursesListDepartmentEnum = {
    _1: '1',
    _10: '10',
    _11: '11',
    _12: '12',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _2: '2',
    _20: '20',
    _21A: '21A',
    _21G: '21G',
    _21H: '21H',
    _21L: '21L',
    _21M: '21M',
    _22: '22',
    _24: '24',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    Cc: 'CC',
    CmsW: 'CMS-W',
    Ec: 'EC',
    Es: 'ES',
    Esd: 'ESD',
    Hst: 'HST',
    Ids: 'IDS',
    Mas: 'MAS',
    Pe: 'PE',
    Res: 'RES',
    Sts: 'STS',
    Wgs: 'WGS'
};
/**
 * @export
 */
exports.CoursesListLevelEnum = {
    Advanced: 'advanced',
    Graduate: 'graduate',
    HighSchool: 'high_school',
    Intermediate: 'intermediate',
    Introductory: 'introductory',
    Noncredit: 'noncredit',
    Undergraduate: 'undergraduate'
};
/**
 * @export
 */
exports.CoursesListOfferedByEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Mitpe: 'mitpe',
    Mitx: 'mitx',
    Ocw: 'ocw',
    Scc: 'scc',
    See: 'see',
    Xpro: 'xpro'
};
/**
 * @export
 */
exports.CoursesListPlatformEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Edx: 'edx',
    Emeritus: 'emeritus',
    Globalalumni: 'globalalumni',
    Mitpe: 'mitpe',
    Mitxonline: 'mitxonline',
    Ocw: 'ocw',
    Oll: 'oll',
    Podcast: 'podcast',
    Scc: 'scc',
    See: 'see',
    Simplilearn: 'simplilearn',
    Susskind: 'susskind',
    Whu: 'whu',
    Xpro: 'xpro',
    Youtube: 'youtube'
};
/**
 * @export
 */
exports.CoursesListResourceTypeEnum = {
    Course: 'course',
    LearningPath: 'learning_path',
    Podcast: 'podcast',
    PodcastEpisode: 'podcast_episode',
    Program: 'program',
    Video: 'video',
    VideoPlaylist: 'video_playlist'
};
/**
 * @export
 */
exports.CoursesListSortbyEnum = {
    CreatedOn: '-created_on',
    Id: '-id',
    LastModified: '-last_modified',
    Mitcoursenumber: '-mitcoursenumber',
    ReadableId: '-readable_id',
    StartDate: '-start_date',
    CreatedOn2: 'created_on',
    Id2: 'id',
    LastModified2: 'last_modified',
    Mitcoursenumber2: 'mitcoursenumber',
    ReadableId2: 'readable_id',
    StartDate2: 'start_date'
};
/**
 * @export
 */
exports.CoursesNewListDepartmentEnum = {
    _1: '1',
    _10: '10',
    _11: '11',
    _12: '12',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _2: '2',
    _20: '20',
    _21A: '21A',
    _21G: '21G',
    _21H: '21H',
    _21L: '21L',
    _21M: '21M',
    _22: '22',
    _24: '24',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    Cc: 'CC',
    CmsW: 'CMS-W',
    Ec: 'EC',
    Es: 'ES',
    Esd: 'ESD',
    Hst: 'HST',
    Ids: 'IDS',
    Mas: 'MAS',
    Pe: 'PE',
    Res: 'RES',
    Sts: 'STS',
    Wgs: 'WGS'
};
/**
 * @export
 */
exports.CoursesNewListLevelEnum = {
    Advanced: 'advanced',
    Graduate: 'graduate',
    HighSchool: 'high_school',
    Intermediate: 'intermediate',
    Introductory: 'introductory',
    Noncredit: 'noncredit',
    Undergraduate: 'undergraduate'
};
/**
 * @export
 */
exports.CoursesNewListOfferedByEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Mitpe: 'mitpe',
    Mitx: 'mitx',
    Ocw: 'ocw',
    Scc: 'scc',
    See: 'see',
    Xpro: 'xpro'
};
/**
 * @export
 */
exports.CoursesNewListPlatformEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Edx: 'edx',
    Emeritus: 'emeritus',
    Globalalumni: 'globalalumni',
    Mitpe: 'mitpe',
    Mitxonline: 'mitxonline',
    Ocw: 'ocw',
    Oll: 'oll',
    Podcast: 'podcast',
    Scc: 'scc',
    See: 'see',
    Simplilearn: 'simplilearn',
    Susskind: 'susskind',
    Whu: 'whu',
    Xpro: 'xpro',
    Youtube: 'youtube'
};
/**
 * @export
 */
exports.CoursesNewListResourceTypeEnum = {
    Course: 'course',
    LearningPath: 'learning_path',
    Podcast: 'podcast',
    PodcastEpisode: 'podcast_episode',
    Program: 'program',
    Video: 'video',
    VideoPlaylist: 'video_playlist'
};
/**
 * @export
 */
exports.CoursesNewListSortbyEnum = {
    CreatedOn: '-created_on',
    Id: '-id',
    LastModified: '-last_modified',
    Mitcoursenumber: '-mitcoursenumber',
    ReadableId: '-readable_id',
    StartDate: '-start_date',
    CreatedOn2: 'created_on',
    Id2: 'id',
    LastModified2: 'last_modified',
    Mitcoursenumber2: 'mitcoursenumber',
    ReadableId2: 'readable_id',
    StartDate2: 'start_date'
};
/**
 * @export
 */
exports.CoursesUpcomingListDepartmentEnum = {
    _1: '1',
    _10: '10',
    _11: '11',
    _12: '12',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _2: '2',
    _20: '20',
    _21A: '21A',
    _21G: '21G',
    _21H: '21H',
    _21L: '21L',
    _21M: '21M',
    _22: '22',
    _24: '24',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    Cc: 'CC',
    CmsW: 'CMS-W',
    Ec: 'EC',
    Es: 'ES',
    Esd: 'ESD',
    Hst: 'HST',
    Ids: 'IDS',
    Mas: 'MAS',
    Pe: 'PE',
    Res: 'RES',
    Sts: 'STS',
    Wgs: 'WGS'
};
/**
 * @export
 */
exports.CoursesUpcomingListLevelEnum = {
    Advanced: 'advanced',
    Graduate: 'graduate',
    HighSchool: 'high_school',
    Intermediate: 'intermediate',
    Introductory: 'introductory',
    Noncredit: 'noncredit',
    Undergraduate: 'undergraduate'
};
/**
 * @export
 */
exports.CoursesUpcomingListOfferedByEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Mitpe: 'mitpe',
    Mitx: 'mitx',
    Ocw: 'ocw',
    Scc: 'scc',
    See: 'see',
    Xpro: 'xpro'
};
/**
 * @export
 */
exports.CoursesUpcomingListPlatformEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Edx: 'edx',
    Emeritus: 'emeritus',
    Globalalumni: 'globalalumni',
    Mitpe: 'mitpe',
    Mitxonline: 'mitxonline',
    Ocw: 'ocw',
    Oll: 'oll',
    Podcast: 'podcast',
    Scc: 'scc',
    See: 'see',
    Simplilearn: 'simplilearn',
    Susskind: 'susskind',
    Whu: 'whu',
    Xpro: 'xpro',
    Youtube: 'youtube'
};
/**
 * @export
 */
exports.CoursesUpcomingListResourceTypeEnum = {
    Course: 'course',
    LearningPath: 'learning_path',
    Podcast: 'podcast',
    PodcastEpisode: 'podcast_episode',
    Program: 'program',
    Video: 'video',
    VideoPlaylist: 'video_playlist'
};
/**
 * @export
 */
exports.CoursesUpcomingListSortbyEnum = {
    CreatedOn: '-created_on',
    Id: '-id',
    LastModified: '-last_modified',
    Mitcoursenumber: '-mitcoursenumber',
    ReadableId: '-readable_id',
    StartDate: '-start_date',
    CreatedOn2: 'created_on',
    Id2: 'id',
    LastModified2: 'last_modified',
    Mitcoursenumber2: 'mitcoursenumber',
    ReadableId2: 'readable_id',
    StartDate2: 'start_date'
};
/**
 * DepartmentsApi - axios parameter creator
 * @export
 */
const DepartmentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * MIT academic departments
         * @summary List
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsList: (limit_1, offset_1, ...args_1) => __awaiter(this, [limit_1, offset_1, ...args_1], void 0, function* (limit, offset, options = {}) {
            const localVarPath = `/api/v1/departments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * MIT academic departments
         * @summary Retrieve
         * @param {string} department_id A unique value identifying this learning resource department.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsRetrieve: (department_id_1, ...args_2) => __awaiter(this, [department_id_1, ...args_2], void 0, function* (department_id, options = {}) {
            // verify required parameter 'department_id' is not null or undefined
            (0, common_1.assertParamExists)('departmentsRetrieve', 'department_id', department_id);
            const localVarPath = `/api/v1/departments/{department_id}/`
                .replace(`{${"department_id"}}`, encodeURIComponent(String(department_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.DepartmentsApiAxiosParamCreator = DepartmentsApiAxiosParamCreator;
/**
 * DepartmentsApi - functional programming interface
 * @export
 */
const DepartmentsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DepartmentsApiAxiosParamCreator)(configuration);
    return {
        /**
         * MIT academic departments
         * @summary List
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsList(limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.departmentsList(limit, offset, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['DepartmentsApi.departmentsList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * MIT academic departments
         * @summary Retrieve
         * @param {string} department_id A unique value identifying this learning resource department.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsRetrieve(department_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.departmentsRetrieve(department_id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['DepartmentsApi.departmentsRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
exports.DepartmentsApiFp = DepartmentsApiFp;
/**
 * DepartmentsApi - factory interface
 * @export
 */
const DepartmentsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DepartmentsApiFp)(configuration);
    return {
        /**
         * MIT academic departments
         * @summary List
         * @param {DepartmentsApiDepartmentsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsList(requestParameters = {}, options) {
            return localVarFp.departmentsList(requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * MIT academic departments
         * @summary Retrieve
         * @param {DepartmentsApiDepartmentsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsRetrieve(requestParameters, options) {
            return localVarFp.departmentsRetrieve(requestParameters.department_id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.DepartmentsApiFactory = DepartmentsApiFactory;
/**
 * DepartmentsApi - object-oriented interface
 * @export
 * @class DepartmentsApi
 * @extends {BaseAPI}
 */
class DepartmentsApi extends base_1.BaseAPI {
    /**
     * MIT academic departments
     * @summary List
     * @param {DepartmentsApiDepartmentsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    departmentsList(requestParameters = {}, options) {
        return (0, exports.DepartmentsApiFp)(this.configuration).departmentsList(requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * MIT academic departments
     * @summary Retrieve
     * @param {DepartmentsApiDepartmentsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    departmentsRetrieve(requestParameters, options) {
        return (0, exports.DepartmentsApiFp)(this.configuration).departmentsRetrieve(requestParameters.department_id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DepartmentsApi = DepartmentsApi;
/**
 * LearningResourcesApi - axios parameter creator
 * @export
 */
const LearningResourcesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Show content files for a learning resource
         * @summary Learning Resource Content File List
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {Array<string>} [content_feature_type] Multiple values may be separated by commas.
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<LearningResourcesContentfilesListOfferedByEnum>} [offered_by] The organization that offers a learning resource the content file belongs to  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<LearningResourcesContentfilesListPlatformEnum>} [platform] The platform on which learning resources the content file belongs to is offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {Array<number>} [resource_id] Multiple values may be separated by commas.
         * @param {Array<number>} [run_id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesContentfilesList: (learning_resource_id_1, content_feature_type_1, limit_1, offered_by_1, offset_1, platform_1, resource_id_1, run_id_1, ...args_1) => __awaiter(this, [learning_resource_id_1, content_feature_type_1, limit_1, offered_by_1, offset_1, platform_1, resource_id_1, run_id_1, ...args_1], void 0, function* (learning_resource_id, content_feature_type, limit, offered_by, offset, platform, resource_id, run_id, options = {}) {
            // verify required parameter 'learning_resource_id' is not null or undefined
            (0, common_1.assertParamExists)('learningResourcesContentfilesList', 'learning_resource_id', learning_resource_id);
            const localVarPath = `/api/v1/learning_resources/{learning_resource_id}/contentfiles/`
                .replace(`{${"learning_resource_id"}}`, encodeURIComponent(String(learning_resource_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (content_feature_type) {
                localVarQueryParameter['content_feature_type'] = content_feature_type.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (resource_id) {
                localVarQueryParameter['resource_id'] = resource_id.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (run_id) {
                localVarQueryParameter['run_id'] = run_id.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Show content files for a learning resource
         * @summary Learning Resource Content File Retrieve
         * @param {number} id A unique integer value identifying this contentfile.
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesContentfilesRetrieve: (id_1, learning_resource_id_2, ...args_2) => __awaiter(this, [id_1, learning_resource_id_2, ...args_2], void 0, function* (id, learning_resource_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('learningResourcesContentfilesRetrieve', 'id', id);
            // verify required parameter 'learning_resource_id' is not null or undefined
            (0, common_1.assertParamExists)('learningResourcesContentfilesRetrieve', 'learning_resource_id', learning_resource_id);
            const localVarPath = `/api/v1/learning_resources/{learning_resource_id}/contentfiles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"learning_resource_id"}}`, encodeURIComponent(String(learning_resource_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a list of related learning resources for a learning resource.
         * @summary Nested Learning Resource List
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [sortby] Which field to use when ordering the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesItemsList: (learning_resource_id_3, limit_2, offset_2, sortby_1, ...args_3) => __awaiter(this, [learning_resource_id_3, limit_2, offset_2, sortby_1, ...args_3], void 0, function* (learning_resource_id, limit, offset, sortby, options = {}) {
            // verify required parameter 'learning_resource_id' is not null or undefined
            (0, common_1.assertParamExists)('learningResourcesItemsList', 'learning_resource_id', learning_resource_id);
            const localVarPath = `/api/v1/learning_resources/{learning_resource_id}/items/`
                .replace(`{${"learning_resource_id"}}`, encodeURIComponent(String(learning_resource_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a singe related learning resource for a learning resource.
         * @summary Nested Learning Resource Retrieve
         * @param {number} id A unique integer value identifying this learning resource relationship.
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesItemsRetrieve: (id_2, learning_resource_id_4, ...args_4) => __awaiter(this, [id_2, learning_resource_id_4, ...args_4], void 0, function* (id, learning_resource_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('learningResourcesItemsRetrieve', 'id', id);
            // verify required parameter 'learning_resource_id' is not null or undefined
            (0, common_1.assertParamExists)('learningResourcesItemsRetrieve', 'learning_resource_id', learning_resource_id);
            const localVarPath = `/api/v1/learning_resources/{learning_resource_id}/items/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"learning_resource_id"}}`, encodeURIComponent(String(learning_resource_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a paginated list of learning resources.
         * @summary List
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<LearningResourcesListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<LearningResourcesListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<LearningResourcesListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<LearningResourcesListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<LearningResourcesListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {LearningResourcesListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesList: (course_feature_1, department_1, level_1, limit_3, offered_by_2, offset_3, platform_2, professional_1, resource_type_1, sortby_2, topic_1, ...args_5) => __awaiter(this, [course_feature_1, department_1, level_1, limit_3, offered_by_2, offset_3, platform_2, professional_1, resource_type_1, sortby_2, topic_1, ...args_5], void 0, function* (course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options = {}) {
            const localVarPath = `/api/v1/learning_resources/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (course_feature) {
                localVarQueryParameter['course_feature'] = course_feature.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (department) {
                localVarQueryParameter['department'] = department;
            }
            if (level) {
                localVarQueryParameter['level'] = level;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (professional !== undefined) {
                localVarQueryParameter['professional'] = professional;
            }
            if (resource_type) {
                localVarQueryParameter['resource_type'] = resource_type;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            if (topic) {
                localVarQueryParameter['topic'] = topic.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a paginated list of newly released Learning Resources.
         * @summary List New
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<LearningResourcesNewListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<LearningResourcesNewListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<LearningResourcesNewListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<LearningResourcesNewListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<LearningResourcesNewListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {LearningResourcesNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesNewList: (course_feature_2, department_2, level_2, limit_4, offered_by_3, offset_4, platform_3, professional_2, resource_type_2, sortby_3, topic_2, ...args_6) => __awaiter(this, [course_feature_2, department_2, level_2, limit_4, offered_by_3, offset_4, platform_3, professional_2, resource_type_2, sortby_3, topic_2, ...args_6], void 0, function* (course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options = {}) {
            const localVarPath = `/api/v1/learning_resources/new/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (course_feature) {
                localVarQueryParameter['course_feature'] = course_feature.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (department) {
                localVarQueryParameter['department'] = department;
            }
            if (level) {
                localVarQueryParameter['level'] = level;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (professional !== undefined) {
                localVarQueryParameter['professional'] = professional;
            }
            if (resource_type) {
                localVarQueryParameter['resource_type'] = resource_type;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            if (topic) {
                localVarQueryParameter['topic'] = topic.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve a single learning resource.
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesRetrieve: (id_3, ...args_7) => __awaiter(this, [id_3, ...args_7], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('learningResourcesRetrieve', 'id', id);
            const localVarPath = `/api/v1/learning_resources/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a paginated list of upcoming Learning Resources.
         * @summary List Upcoming
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<LearningResourcesUpcomingListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<LearningResourcesUpcomingListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<LearningResourcesUpcomingListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<LearningResourcesUpcomingListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<LearningResourcesUpcomingListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {LearningResourcesUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesUpcomingList: (course_feature_3, department_3, level_3, limit_5, offered_by_4, offset_5, platform_4, professional_3, resource_type_3, sortby_4, topic_3, ...args_8) => __awaiter(this, [course_feature_3, department_3, level_3, limit_5, offered_by_4, offset_5, platform_4, professional_3, resource_type_3, sortby_4, topic_3, ...args_8], void 0, function* (course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options = {}) {
            const localVarPath = `/api/v1/learning_resources/upcoming/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (course_feature) {
                localVarQueryParameter['course_feature'] = course_feature.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (department) {
                localVarQueryParameter['department'] = department;
            }
            if (level) {
                localVarQueryParameter['level'] = level;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (professional !== undefined) {
                localVarQueryParameter['professional'] = professional;
            }
            if (resource_type) {
                localVarQueryParameter['resource_type'] = resource_type;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            if (topic) {
                localVarQueryParameter['topic'] = topic.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.LearningResourcesApiAxiosParamCreator = LearningResourcesApiAxiosParamCreator;
/**
 * LearningResourcesApi - functional programming interface
 * @export
 */
const LearningResourcesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.LearningResourcesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Show content files for a learning resource
         * @summary Learning Resource Content File List
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {Array<string>} [content_feature_type] Multiple values may be separated by commas.
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<LearningResourcesContentfilesListOfferedByEnum>} [offered_by] The organization that offers a learning resource the content file belongs to  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<LearningResourcesContentfilesListPlatformEnum>} [platform] The platform on which learning resources the content file belongs to is offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {Array<number>} [resource_id] Multiple values may be separated by commas.
         * @param {Array<number>} [run_id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesContentfilesList(learning_resource_id, content_feature_type, limit, offered_by, offset, platform, resource_id, run_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.learningResourcesContentfilesList(learning_resource_id, content_feature_type, limit, offered_by, offset, platform, resource_id, run_id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['LearningResourcesApi.learningResourcesContentfilesList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Show content files for a learning resource
         * @summary Learning Resource Content File Retrieve
         * @param {number} id A unique integer value identifying this contentfile.
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesContentfilesRetrieve(id, learning_resource_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.learningResourcesContentfilesRetrieve(id, learning_resource_id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['LearningResourcesApi.learningResourcesContentfilesRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Get a list of related learning resources for a learning resource.
         * @summary Nested Learning Resource List
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [sortby] Which field to use when ordering the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesItemsList(learning_resource_id, limit, offset, sortby, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.learningResourcesItemsList(learning_resource_id, limit, offset, sortby, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['LearningResourcesApi.learningResourcesItemsList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Get a singe related learning resource for a learning resource.
         * @summary Nested Learning Resource Retrieve
         * @param {number} id A unique integer value identifying this learning resource relationship.
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesItemsRetrieve(id, learning_resource_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.learningResourcesItemsRetrieve(id, learning_resource_id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['LearningResourcesApi.learningResourcesItemsRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Get a paginated list of learning resources.
         * @summary List
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<LearningResourcesListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<LearningResourcesListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<LearningResourcesListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<LearningResourcesListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<LearningResourcesListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {LearningResourcesListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.learningResourcesList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['LearningResourcesApi.learningResourcesList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Get a paginated list of newly released Learning Resources.
         * @summary List New
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<LearningResourcesNewListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<LearningResourcesNewListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<LearningResourcesNewListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<LearningResourcesNewListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<LearningResourcesNewListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {LearningResourcesNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesNewList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.learningResourcesNewList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['LearningResourcesApi.learningResourcesNewList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Retrieve a single learning resource.
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesRetrieve(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.learningResourcesRetrieve(id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['LearningResourcesApi.learningResourcesRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Get a paginated list of upcoming Learning Resources.
         * @summary List Upcoming
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<LearningResourcesUpcomingListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<LearningResourcesUpcomingListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<LearningResourcesUpcomingListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<LearningResourcesUpcomingListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<LearningResourcesUpcomingListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {LearningResourcesUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesUpcomingList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.learningResourcesUpcomingList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['LearningResourcesApi.learningResourcesUpcomingList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
exports.LearningResourcesApiFp = LearningResourcesApiFp;
/**
 * LearningResourcesApi - factory interface
 * @export
 */
const LearningResourcesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.LearningResourcesApiFp)(configuration);
    return {
        /**
         * Show content files for a learning resource
         * @summary Learning Resource Content File List
         * @param {LearningResourcesApiLearningResourcesContentfilesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesContentfilesList(requestParameters, options) {
            return localVarFp.learningResourcesContentfilesList(requestParameters.learning_resource_id, requestParameters.content_feature_type, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.resource_id, requestParameters.run_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Show content files for a learning resource
         * @summary Learning Resource Content File Retrieve
         * @param {LearningResourcesApiLearningResourcesContentfilesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesContentfilesRetrieve(requestParameters, options) {
            return localVarFp.learningResourcesContentfilesRetrieve(requestParameters.id, requestParameters.learning_resource_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of related learning resources for a learning resource.
         * @summary Nested Learning Resource List
         * @param {LearningResourcesApiLearningResourcesItemsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesItemsList(requestParameters, options) {
            return localVarFp.learningResourcesItemsList(requestParameters.learning_resource_id, requestParameters.limit, requestParameters.offset, requestParameters.sortby, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a singe related learning resource for a learning resource.
         * @summary Nested Learning Resource Retrieve
         * @param {LearningResourcesApiLearningResourcesItemsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesItemsRetrieve(requestParameters, options) {
            return localVarFp.learningResourcesItemsRetrieve(requestParameters.id, requestParameters.learning_resource_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of learning resources.
         * @summary List
         * @param {LearningResourcesApiLearningResourcesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesList(requestParameters = {}, options) {
            return localVarFp.learningResourcesList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of newly released Learning Resources.
         * @summary List New
         * @param {LearningResourcesApiLearningResourcesNewListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesNewList(requestParameters = {}, options) {
            return localVarFp.learningResourcesNewList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single learning resource.
         * @summary Retrieve
         * @param {LearningResourcesApiLearningResourcesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesRetrieve(requestParameters, options) {
            return localVarFp.learningResourcesRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of upcoming Learning Resources.
         * @summary List Upcoming
         * @param {LearningResourcesApiLearningResourcesUpcomingListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesUpcomingList(requestParameters = {}, options) {
            return localVarFp.learningResourcesUpcomingList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(axios, basePath));
        },
    };
};
exports.LearningResourcesApiFactory = LearningResourcesApiFactory;
/**
 * LearningResourcesApi - object-oriented interface
 * @export
 * @class LearningResourcesApi
 * @extends {BaseAPI}
 */
class LearningResourcesApi extends base_1.BaseAPI {
    /**
     * Show content files for a learning resource
     * @summary Learning Resource Content File List
     * @param {LearningResourcesApiLearningResourcesContentfilesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningResourcesApi
     */
    learningResourcesContentfilesList(requestParameters, options) {
        return (0, exports.LearningResourcesApiFp)(this.configuration).learningResourcesContentfilesList(requestParameters.learning_resource_id, requestParameters.content_feature_type, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.resource_id, requestParameters.run_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Show content files for a learning resource
     * @summary Learning Resource Content File Retrieve
     * @param {LearningResourcesApiLearningResourcesContentfilesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningResourcesApi
     */
    learningResourcesContentfilesRetrieve(requestParameters, options) {
        return (0, exports.LearningResourcesApiFp)(this.configuration).learningResourcesContentfilesRetrieve(requestParameters.id, requestParameters.learning_resource_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of related learning resources for a learning resource.
     * @summary Nested Learning Resource List
     * @param {LearningResourcesApiLearningResourcesItemsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningResourcesApi
     */
    learningResourcesItemsList(requestParameters, options) {
        return (0, exports.LearningResourcesApiFp)(this.configuration).learningResourcesItemsList(requestParameters.learning_resource_id, requestParameters.limit, requestParameters.offset, requestParameters.sortby, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a singe related learning resource for a learning resource.
     * @summary Nested Learning Resource Retrieve
     * @param {LearningResourcesApiLearningResourcesItemsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningResourcesApi
     */
    learningResourcesItemsRetrieve(requestParameters, options) {
        return (0, exports.LearningResourcesApiFp)(this.configuration).learningResourcesItemsRetrieve(requestParameters.id, requestParameters.learning_resource_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {LearningResourcesApiLearningResourcesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningResourcesApi
     */
    learningResourcesList(requestParameters = {}, options) {
        return (0, exports.LearningResourcesApiFp)(this.configuration).learningResourcesList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a paginated list of newly released Learning Resources.
     * @summary List New
     * @param {LearningResourcesApiLearningResourcesNewListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningResourcesApi
     */
    learningResourcesNewList(requestParameters = {}, options) {
        return (0, exports.LearningResourcesApiFp)(this.configuration).learningResourcesNewList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {LearningResourcesApiLearningResourcesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningResourcesApi
     */
    learningResourcesRetrieve(requestParameters, options) {
        return (0, exports.LearningResourcesApiFp)(this.configuration).learningResourcesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a paginated list of upcoming Learning Resources.
     * @summary List Upcoming
     * @param {LearningResourcesApiLearningResourcesUpcomingListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningResourcesApi
     */
    learningResourcesUpcomingList(requestParameters = {}, options) {
        return (0, exports.LearningResourcesApiFp)(this.configuration).learningResourcesUpcomingList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.LearningResourcesApi = LearningResourcesApi;
/**
 * @export
 */
exports.LearningResourcesContentfilesListOfferedByEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Mitpe: 'mitpe',
    Mitx: 'mitx',
    Ocw: 'ocw',
    Scc: 'scc',
    See: 'see',
    Xpro: 'xpro'
};
/**
 * @export
 */
exports.LearningResourcesContentfilesListPlatformEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Edx: 'edx',
    Emeritus: 'emeritus',
    Globalalumni: 'globalalumni',
    Mitpe: 'mitpe',
    Mitxonline: 'mitxonline',
    Ocw: 'ocw',
    Oll: 'oll',
    Podcast: 'podcast',
    Scc: 'scc',
    See: 'see',
    Simplilearn: 'simplilearn',
    Susskind: 'susskind',
    Whu: 'whu',
    Xpro: 'xpro',
    Youtube: 'youtube'
};
/**
 * @export
 */
exports.LearningResourcesListDepartmentEnum = {
    _1: '1',
    _10: '10',
    _11: '11',
    _12: '12',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _2: '2',
    _20: '20',
    _21A: '21A',
    _21G: '21G',
    _21H: '21H',
    _21L: '21L',
    _21M: '21M',
    _22: '22',
    _24: '24',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    Cc: 'CC',
    CmsW: 'CMS-W',
    Ec: 'EC',
    Es: 'ES',
    Esd: 'ESD',
    Hst: 'HST',
    Ids: 'IDS',
    Mas: 'MAS',
    Pe: 'PE',
    Res: 'RES',
    Sts: 'STS',
    Wgs: 'WGS'
};
/**
 * @export
 */
exports.LearningResourcesListLevelEnum = {
    Advanced: 'advanced',
    Graduate: 'graduate',
    HighSchool: 'high_school',
    Intermediate: 'intermediate',
    Introductory: 'introductory',
    Noncredit: 'noncredit',
    Undergraduate: 'undergraduate'
};
/**
 * @export
 */
exports.LearningResourcesListOfferedByEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Mitpe: 'mitpe',
    Mitx: 'mitx',
    Ocw: 'ocw',
    Scc: 'scc',
    See: 'see',
    Xpro: 'xpro'
};
/**
 * @export
 */
exports.LearningResourcesListPlatformEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Edx: 'edx',
    Emeritus: 'emeritus',
    Globalalumni: 'globalalumni',
    Mitpe: 'mitpe',
    Mitxonline: 'mitxonline',
    Ocw: 'ocw',
    Oll: 'oll',
    Podcast: 'podcast',
    Scc: 'scc',
    See: 'see',
    Simplilearn: 'simplilearn',
    Susskind: 'susskind',
    Whu: 'whu',
    Xpro: 'xpro',
    Youtube: 'youtube'
};
/**
 * @export
 */
exports.LearningResourcesListResourceTypeEnum = {
    Course: 'course',
    LearningPath: 'learning_path',
    Podcast: 'podcast',
    PodcastEpisode: 'podcast_episode',
    Program: 'program',
    Video: 'video',
    VideoPlaylist: 'video_playlist'
};
/**
 * @export
 */
exports.LearningResourcesListSortbyEnum = {
    CreatedOn: '-created_on',
    Id: '-id',
    LastModified: '-last_modified',
    Mitcoursenumber: '-mitcoursenumber',
    ReadableId: '-readable_id',
    StartDate: '-start_date',
    CreatedOn2: 'created_on',
    Id2: 'id',
    LastModified2: 'last_modified',
    Mitcoursenumber2: 'mitcoursenumber',
    ReadableId2: 'readable_id',
    StartDate2: 'start_date'
};
/**
 * @export
 */
exports.LearningResourcesNewListDepartmentEnum = {
    _1: '1',
    _10: '10',
    _11: '11',
    _12: '12',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _2: '2',
    _20: '20',
    _21A: '21A',
    _21G: '21G',
    _21H: '21H',
    _21L: '21L',
    _21M: '21M',
    _22: '22',
    _24: '24',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    Cc: 'CC',
    CmsW: 'CMS-W',
    Ec: 'EC',
    Es: 'ES',
    Esd: 'ESD',
    Hst: 'HST',
    Ids: 'IDS',
    Mas: 'MAS',
    Pe: 'PE',
    Res: 'RES',
    Sts: 'STS',
    Wgs: 'WGS'
};
/**
 * @export
 */
exports.LearningResourcesNewListLevelEnum = {
    Advanced: 'advanced',
    Graduate: 'graduate',
    HighSchool: 'high_school',
    Intermediate: 'intermediate',
    Introductory: 'introductory',
    Noncredit: 'noncredit',
    Undergraduate: 'undergraduate'
};
/**
 * @export
 */
exports.LearningResourcesNewListOfferedByEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Mitpe: 'mitpe',
    Mitx: 'mitx',
    Ocw: 'ocw',
    Scc: 'scc',
    See: 'see',
    Xpro: 'xpro'
};
/**
 * @export
 */
exports.LearningResourcesNewListPlatformEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Edx: 'edx',
    Emeritus: 'emeritus',
    Globalalumni: 'globalalumni',
    Mitpe: 'mitpe',
    Mitxonline: 'mitxonline',
    Ocw: 'ocw',
    Oll: 'oll',
    Podcast: 'podcast',
    Scc: 'scc',
    See: 'see',
    Simplilearn: 'simplilearn',
    Susskind: 'susskind',
    Whu: 'whu',
    Xpro: 'xpro',
    Youtube: 'youtube'
};
/**
 * @export
 */
exports.LearningResourcesNewListResourceTypeEnum = {
    Course: 'course',
    LearningPath: 'learning_path',
    Podcast: 'podcast',
    PodcastEpisode: 'podcast_episode',
    Program: 'program',
    Video: 'video',
    VideoPlaylist: 'video_playlist'
};
/**
 * @export
 */
exports.LearningResourcesNewListSortbyEnum = {
    CreatedOn: '-created_on',
    Id: '-id',
    LastModified: '-last_modified',
    Mitcoursenumber: '-mitcoursenumber',
    ReadableId: '-readable_id',
    StartDate: '-start_date',
    CreatedOn2: 'created_on',
    Id2: 'id',
    LastModified2: 'last_modified',
    Mitcoursenumber2: 'mitcoursenumber',
    ReadableId2: 'readable_id',
    StartDate2: 'start_date'
};
/**
 * @export
 */
exports.LearningResourcesUpcomingListDepartmentEnum = {
    _1: '1',
    _10: '10',
    _11: '11',
    _12: '12',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _2: '2',
    _20: '20',
    _21A: '21A',
    _21G: '21G',
    _21H: '21H',
    _21L: '21L',
    _21M: '21M',
    _22: '22',
    _24: '24',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    Cc: 'CC',
    CmsW: 'CMS-W',
    Ec: 'EC',
    Es: 'ES',
    Esd: 'ESD',
    Hst: 'HST',
    Ids: 'IDS',
    Mas: 'MAS',
    Pe: 'PE',
    Res: 'RES',
    Sts: 'STS',
    Wgs: 'WGS'
};
/**
 * @export
 */
exports.LearningResourcesUpcomingListLevelEnum = {
    Advanced: 'advanced',
    Graduate: 'graduate',
    HighSchool: 'high_school',
    Intermediate: 'intermediate',
    Introductory: 'introductory',
    Noncredit: 'noncredit',
    Undergraduate: 'undergraduate'
};
/**
 * @export
 */
exports.LearningResourcesUpcomingListOfferedByEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Mitpe: 'mitpe',
    Mitx: 'mitx',
    Ocw: 'ocw',
    Scc: 'scc',
    See: 'see',
    Xpro: 'xpro'
};
/**
 * @export
 */
exports.LearningResourcesUpcomingListPlatformEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Edx: 'edx',
    Emeritus: 'emeritus',
    Globalalumni: 'globalalumni',
    Mitpe: 'mitpe',
    Mitxonline: 'mitxonline',
    Ocw: 'ocw',
    Oll: 'oll',
    Podcast: 'podcast',
    Scc: 'scc',
    See: 'see',
    Simplilearn: 'simplilearn',
    Susskind: 'susskind',
    Whu: 'whu',
    Xpro: 'xpro',
    Youtube: 'youtube'
};
/**
 * @export
 */
exports.LearningResourcesUpcomingListResourceTypeEnum = {
    Course: 'course',
    LearningPath: 'learning_path',
    Podcast: 'podcast',
    PodcastEpisode: 'podcast_episode',
    Program: 'program',
    Video: 'video',
    VideoPlaylist: 'video_playlist'
};
/**
 * @export
 */
exports.LearningResourcesUpcomingListSortbyEnum = {
    CreatedOn: '-created_on',
    Id: '-id',
    LastModified: '-last_modified',
    Mitcoursenumber: '-mitcoursenumber',
    ReadableId: '-readable_id',
    StartDate: '-start_date',
    CreatedOn2: 'created_on',
    Id2: 'id',
    LastModified2: 'last_modified',
    Mitcoursenumber2: 'mitcoursenumber',
    ReadableId2: 'readable_id',
    StartDate2: 'start_date'
};
/**
 * LearningResourcesSearchApi - axios parameter creator
 * @export
 */
const LearningResourcesSearchApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Search for learning resources
         * @summary Search
         * @param {Array<LearningResourcesSearchRetrieveAggregationsEnum>} [aggregations] Show resource counts by category
         * @param {boolean | null} [certification] True if the learning resource offers a certificate
         * @param {Array<string>} [course_feature] The course feature. Possible options are at api/v1/course_features/
         * @param {Array<LearningResourcesSearchRetrieveDepartmentEnum>} [department] The department that offers the learning resource               * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<number>} [id] The id value for the learning resource
         * @param {Array<LearningResourcesSearchRetrieveLevelEnum>} [level]
         * @param {number} [limit] Number of results to return per page
         * @param {Array<LearningResourcesSearchRetrieveOfferedByEnum>} [offered_by] The organization that offers the learning resource               * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results
         * @param {Array<LearningResourcesSearchRetrievePlatformEnum>} [platform] The platform on which the learning resource id offered               * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean | null} [professional]
         * @param {string} [q] The search text
         * @param {Array<LearningResourcesSearchRetrieveResourceTypeEnum>} [resource_type] The type of learning resource               * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast episode * &#x60;video&#x60; - video * &#x60;video_playlist&#x60; - video playlist
         * @param {LearningResourcesSearchRetrieveSortbyEnum} [sortby] If the parameter starts with \&#39;-\&#39; the sort is in descending order  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] The topic name. To see a list of options go to api/v1/topics/
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesSearchRetrieve: (aggregations_1, certification_1, course_feature_1, department_1, id_1, level_1, limit_1, offered_by_1, offset_1, platform_1, professional_1, q_1, resource_type_1, sortby_1, topic_1, ...args_1) => __awaiter(this, [aggregations_1, certification_1, course_feature_1, department_1, id_1, level_1, limit_1, offered_by_1, offset_1, platform_1, professional_1, q_1, resource_type_1, sortby_1, topic_1, ...args_1], void 0, function* (aggregations, certification, course_feature, department, id, level, limit, offered_by, offset, platform, professional, q, resource_type, sortby, topic, options = {}) {
            const localVarPath = `/api/v1/learning_resources_search/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (aggregations) {
                localVarQueryParameter['aggregations'] = aggregations;
            }
            if (certification !== undefined) {
                localVarQueryParameter['certification'] = certification;
            }
            if (course_feature) {
                localVarQueryParameter['course_feature'] = course_feature;
            }
            if (department) {
                localVarQueryParameter['department'] = department;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (level) {
                localVarQueryParameter['level'] = level;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (professional !== undefined) {
                localVarQueryParameter['professional'] = professional;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (resource_type) {
                localVarQueryParameter['resource_type'] = resource_type;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            if (topic) {
                localVarQueryParameter['topic'] = topic;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.LearningResourcesSearchApiAxiosParamCreator = LearningResourcesSearchApiAxiosParamCreator;
/**
 * LearningResourcesSearchApi - functional programming interface
 * @export
 */
const LearningResourcesSearchApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.LearningResourcesSearchApiAxiosParamCreator)(configuration);
    return {
        /**
         * Search for learning resources
         * @summary Search
         * @param {Array<LearningResourcesSearchRetrieveAggregationsEnum>} [aggregations] Show resource counts by category
         * @param {boolean | null} [certification] True if the learning resource offers a certificate
         * @param {Array<string>} [course_feature] The course feature. Possible options are at api/v1/course_features/
         * @param {Array<LearningResourcesSearchRetrieveDepartmentEnum>} [department] The department that offers the learning resource               * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<number>} [id] The id value for the learning resource
         * @param {Array<LearningResourcesSearchRetrieveLevelEnum>} [level]
         * @param {number} [limit] Number of results to return per page
         * @param {Array<LearningResourcesSearchRetrieveOfferedByEnum>} [offered_by] The organization that offers the learning resource               * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results
         * @param {Array<LearningResourcesSearchRetrievePlatformEnum>} [platform] The platform on which the learning resource id offered               * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean | null} [professional]
         * @param {string} [q] The search text
         * @param {Array<LearningResourcesSearchRetrieveResourceTypeEnum>} [resource_type] The type of learning resource               * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast episode * &#x60;video&#x60; - video * &#x60;video_playlist&#x60; - video playlist
         * @param {LearningResourcesSearchRetrieveSortbyEnum} [sortby] If the parameter starts with \&#39;-\&#39; the sort is in descending order  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] The topic name. To see a list of options go to api/v1/topics/
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesSearchRetrieve(aggregations, certification, course_feature, department, id, level, limit, offered_by, offset, platform, professional, q, resource_type, sortby, topic, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.learningResourcesSearchRetrieve(aggregations, certification, course_feature, department, id, level, limit, offered_by, offset, platform, professional, q, resource_type, sortby, topic, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['LearningResourcesSearchApi.learningResourcesSearchRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
exports.LearningResourcesSearchApiFp = LearningResourcesSearchApiFp;
/**
 * LearningResourcesSearchApi - factory interface
 * @export
 */
const LearningResourcesSearchApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.LearningResourcesSearchApiFp)(configuration);
    return {
        /**
         * Search for learning resources
         * @summary Search
         * @param {LearningResourcesSearchApiLearningResourcesSearchRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesSearchRetrieve(requestParameters = {}, options) {
            return localVarFp.learningResourcesSearchRetrieve(requestParameters.aggregations, requestParameters.certification, requestParameters.course_feature, requestParameters.department, requestParameters.id, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.q, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(axios, basePath));
        },
    };
};
exports.LearningResourcesSearchApiFactory = LearningResourcesSearchApiFactory;
/**
 * LearningResourcesSearchApi - object-oriented interface
 * @export
 * @class LearningResourcesSearchApi
 * @extends {BaseAPI}
 */
class LearningResourcesSearchApi extends base_1.BaseAPI {
    /**
     * Search for learning resources
     * @summary Search
     * @param {LearningResourcesSearchApiLearningResourcesSearchRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningResourcesSearchApi
     */
    learningResourcesSearchRetrieve(requestParameters = {}, options) {
        return (0, exports.LearningResourcesSearchApiFp)(this.configuration).learningResourcesSearchRetrieve(requestParameters.aggregations, requestParameters.certification, requestParameters.course_feature, requestParameters.department, requestParameters.id, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.q, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.LearningResourcesSearchApi = LearningResourcesSearchApi;
/**
 * @export
 */
exports.LearningResourcesSearchRetrieveAggregationsEnum = {
    ResourceType: 'resource_type',
    Certification: 'certification',
    OfferedBy: 'offered_by',
    Platform: 'platform',
    Topic: 'topic',
    Department: 'department',
    Level: 'level',
    CourseFeature: 'course_feature',
    Professional: 'professional'
};
/**
 * @export
 */
exports.LearningResourcesSearchRetrieveDepartmentEnum = {
    _1: '1',
    _2: '2',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    _10: '10',
    _11: '11',
    _12: '12',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _20: '20',
    _21A: '21A',
    _21G: '21G',
    _21H: '21H',
    _21L: '21L',
    _21M: '21M',
    _22: '22',
    _24: '24',
    Cc: 'CC',
    CmsW: 'CMS-W',
    Ec: 'EC',
    Es: 'ES',
    Esd: 'ESD',
    Hst: 'HST',
    Ids: 'IDS',
    Mas: 'MAS',
    Pe: 'PE',
    Res: 'RES',
    Sts: 'STS',
    Wgs: 'WGS'
};
/**
 * @export
 */
exports.LearningResourcesSearchRetrieveLevelEnum = {
    Undergraduate: 'undergraduate',
    Graduate: 'graduate',
    HighSchool: 'high_school',
    Noncredit: 'noncredit',
    Advanced: 'advanced',
    Intermediate: 'intermediate',
    Introductory: 'introductory'
};
/**
 * @export
 */
exports.LearningResourcesSearchRetrieveOfferedByEnum = {
    Mitx: 'mitx',
    Ocw: 'ocw',
    Bootcamps: 'bootcamps',
    Xpro: 'xpro',
    Csail: 'csail',
    Mitpe: 'mitpe',
    See: 'see',
    Scc: 'scc',
    Ctl: 'ctl'
};
/**
 * @export
 */
exports.LearningResourcesSearchRetrievePlatformEnum = {
    Edx: 'edx',
    Ocw: 'ocw',
    Oll: 'oll',
    Mitxonline: 'mitxonline',
    Bootcamps: 'bootcamps',
    Xpro: 'xpro',
    Csail: 'csail',
    Mitpe: 'mitpe',
    See: 'see',
    Scc: 'scc',
    Ctl: 'ctl',
    Whu: 'whu',
    Susskind: 'susskind',
    Globalalumni: 'globalalumni',
    Simplilearn: 'simplilearn',
    Emeritus: 'emeritus',
    Podcast: 'podcast',
    Youtube: 'youtube'
};
/**
 * @export
 */
exports.LearningResourcesSearchRetrieveResourceTypeEnum = {
    Course: 'course',
    Program: 'program',
    LearningPath: 'learning_path',
    Podcast: 'podcast',
    PodcastEpisode: 'podcast_episode',
    Video: 'video',
    VideoPlaylist: 'video_playlist'
};
/**
 * @export
 */
exports.LearningResourcesSearchRetrieveSortbyEnum = {
    Id: 'id',
    Id2: '-id',
    ReadableId: 'readable_id',
    ReadableId2: '-readable_id',
    LastModified: 'last_modified',
    LastModified2: '-last_modified',
    CreatedOn: 'created_on',
    CreatedOn2: '-created_on',
    StartDate: 'start_date',
    StartDate2: '-start_date',
    Mitcoursenumber: 'mitcoursenumber',
    Mitcoursenumber2: '-mitcoursenumber'
};
/**
 * LearningpathsApi - axios parameter creator
 * @export
 */
const LearningpathsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a learning path
         * @summary Create
         * @param {LearningPathResourceRequest} LearningPathResourceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsCreate: (LearningPathResourceRequest_1, ...args_1) => __awaiter(this, [LearningPathResourceRequest_1, ...args_1], void 0, function* (LearningPathResourceRequest, options = {}) {
            // verify required parameter 'LearningPathResourceRequest' is not null or undefined
            (0, common_1.assertParamExists)('learningpathsCreate', 'LearningPathResourceRequest', LearningPathResourceRequest);
            const localVarPath = `/api/v1/learningpaths/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(LearningPathResourceRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a learning path
         * @summary Destroy
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsDestroy: (id_1, ...args_2) => __awaiter(this, [id_1, ...args_2], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('learningpathsDestroy', 'id', id);
            const localVarPath = `/api/v1/learningpaths/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Viewset for LearningPath related resources
         * @summary Learning Path Resource Relationship Add
         * @param {number} learning_resource_id The learning resource id of the learning path
         * @param {LearningPathRelationshipRequest} LearningPathRelationshipRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsItemsCreate: (learning_resource_id_1, LearningPathRelationshipRequest_1, ...args_3) => __awaiter(this, [learning_resource_id_1, LearningPathRelationshipRequest_1, ...args_3], void 0, function* (learning_resource_id, LearningPathRelationshipRequest, options = {}) {
            // verify required parameter 'learning_resource_id' is not null or undefined
            (0, common_1.assertParamExists)('learningpathsItemsCreate', 'learning_resource_id', learning_resource_id);
            // verify required parameter 'LearningPathRelationshipRequest' is not null or undefined
            (0, common_1.assertParamExists)('learningpathsItemsCreate', 'LearningPathRelationshipRequest', LearningPathRelationshipRequest);
            const localVarPath = `/api/v1/learningpaths/{learning_resource_id}/items/`
                .replace(`{${"learning_resource_id"}}`, encodeURIComponent(String(learning_resource_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(LearningPathRelationshipRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Viewset for LearningPath related resources
         * @summary Learning Path Resource Relationship Remove
         * @param {number} id A unique integer value identifying this learning resource relationship.
         * @param {number} learning_resource_id The learning resource id of the learning path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsItemsDestroy: (id_2, learning_resource_id_2, ...args_4) => __awaiter(this, [id_2, learning_resource_id_2, ...args_4], void 0, function* (id, learning_resource_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('learningpathsItemsDestroy', 'id', id);
            // verify required parameter 'learning_resource_id' is not null or undefined
            (0, common_1.assertParamExists)('learningpathsItemsDestroy', 'learning_resource_id', learning_resource_id);
            const localVarPath = `/api/v1/learningpaths/{learning_resource_id}/items/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"learning_resource_id"}}`, encodeURIComponent(String(learning_resource_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a list of related learning resources for a learning resource.
         * @summary Nested Learning Resource List
         * @param {number} learning_resource_id The learning resource id of the learning path
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [sortby] Which field to use when ordering the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsItemsList: (learning_resource_id_3, limit_1, offset_1, sortby_1, ...args_5) => __awaiter(this, [learning_resource_id_3, limit_1, offset_1, sortby_1, ...args_5], void 0, function* (learning_resource_id, limit, offset, sortby, options = {}) {
            // verify required parameter 'learning_resource_id' is not null or undefined
            (0, common_1.assertParamExists)('learningpathsItemsList', 'learning_resource_id', learning_resource_id);
            const localVarPath = `/api/v1/learningpaths/{learning_resource_id}/items/`
                .replace(`{${"learning_resource_id"}}`, encodeURIComponent(String(learning_resource_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Viewset for LearningPath related resources
         * @summary Learning Path Resource Relationship Update
         * @param {number} id A unique integer value identifying this learning resource relationship.
         * @param {number} learning_resource_id The learning resource id of the learning path
         * @param {PatchedLearningPathRelationshipRequest} [PatchedLearningPathRelationshipRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsItemsPartialUpdate: (id_3, learning_resource_id_4, PatchedLearningPathRelationshipRequest_1, ...args_6) => __awaiter(this, [id_3, learning_resource_id_4, PatchedLearningPathRelationshipRequest_1, ...args_6], void 0, function* (id, learning_resource_id, PatchedLearningPathRelationshipRequest, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('learningpathsItemsPartialUpdate', 'id', id);
            // verify required parameter 'learning_resource_id' is not null or undefined
            (0, common_1.assertParamExists)('learningpathsItemsPartialUpdate', 'learning_resource_id', learning_resource_id);
            const localVarPath = `/api/v1/learningpaths/{learning_resource_id}/items/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"learning_resource_id"}}`, encodeURIComponent(String(learning_resource_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(PatchedLearningPathRelationshipRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a singe related learning resource for a learning resource.
         * @summary Nested Learning Resource Retrieve
         * @param {number} id A unique integer value identifying this learning resource relationship.
         * @param {number} learning_resource_id The learning resource id of the learning path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsItemsRetrieve: (id_4, learning_resource_id_5, ...args_7) => __awaiter(this, [id_4, learning_resource_id_5, ...args_7], void 0, function* (id, learning_resource_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('learningpathsItemsRetrieve', 'id', id);
            // verify required parameter 'learning_resource_id' is not null or undefined
            (0, common_1.assertParamExists)('learningpathsItemsRetrieve', 'learning_resource_id', learning_resource_id);
            const localVarPath = `/api/v1/learningpaths/{learning_resource_id}/items/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"learning_resource_id"}}`, encodeURIComponent(String(learning_resource_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a paginated list of learning paths
         * @summary List
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<LearningpathsListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<LearningpathsListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<LearningpathsListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<LearningpathsListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<LearningpathsListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {LearningpathsListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsList: (course_feature_1, department_1, level_1, limit_2, offered_by_1, offset_2, platform_1, professional_1, resource_type_1, sortby_2, topic_1, ...args_8) => __awaiter(this, [course_feature_1, department_1, level_1, limit_2, offered_by_1, offset_2, platform_1, professional_1, resource_type_1, sortby_2, topic_1, ...args_8], void 0, function* (course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options = {}) {
            const localVarPath = `/api/v1/learningpaths/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (course_feature) {
                localVarQueryParameter['course_feature'] = course_feature.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (department) {
                localVarQueryParameter['department'] = department;
            }
            if (level) {
                localVarQueryParameter['level'] = level;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (professional !== undefined) {
                localVarQueryParameter['professional'] = professional;
            }
            if (resource_type) {
                localVarQueryParameter['resource_type'] = resource_type;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            if (topic) {
                localVarQueryParameter['topic'] = topic.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update individual fields of a learning path
         * @summary Update
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {PatchedLearningPathResourceRequest} [PatchedLearningPathResourceRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsPartialUpdate: (id_5, PatchedLearningPathResourceRequest_1, ...args_9) => __awaiter(this, [id_5, PatchedLearningPathResourceRequest_1, ...args_9], void 0, function* (id, PatchedLearningPathResourceRequest, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('learningpathsPartialUpdate', 'id', id);
            const localVarPath = `/api/v1/learningpaths/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(PatchedLearningPathResourceRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrive a single learning path
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsRetrieve: (id_6, ...args_10) => __awaiter(this, [id_6, ...args_10], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('learningpathsRetrieve', 'id', id);
            const localVarPath = `/api/v1/learningpaths/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.LearningpathsApiAxiosParamCreator = LearningpathsApiAxiosParamCreator;
/**
 * LearningpathsApi - functional programming interface
 * @export
 */
const LearningpathsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.LearningpathsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Create a learning path
         * @summary Create
         * @param {LearningPathResourceRequest} LearningPathResourceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsCreate(LearningPathResourceRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.learningpathsCreate(LearningPathResourceRequest, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['LearningpathsApi.learningpathsCreate']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Remove a learning path
         * @summary Destroy
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsDestroy(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.learningpathsDestroy(id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['LearningpathsApi.learningpathsDestroy']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Viewset for LearningPath related resources
         * @summary Learning Path Resource Relationship Add
         * @param {number} learning_resource_id The learning resource id of the learning path
         * @param {LearningPathRelationshipRequest} LearningPathRelationshipRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsItemsCreate(learning_resource_id, LearningPathRelationshipRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.learningpathsItemsCreate(learning_resource_id, LearningPathRelationshipRequest, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['LearningpathsApi.learningpathsItemsCreate']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Viewset for LearningPath related resources
         * @summary Learning Path Resource Relationship Remove
         * @param {number} id A unique integer value identifying this learning resource relationship.
         * @param {number} learning_resource_id The learning resource id of the learning path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsItemsDestroy(id, learning_resource_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.learningpathsItemsDestroy(id, learning_resource_id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['LearningpathsApi.learningpathsItemsDestroy']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Get a list of related learning resources for a learning resource.
         * @summary Nested Learning Resource List
         * @param {number} learning_resource_id The learning resource id of the learning path
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [sortby] Which field to use when ordering the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsItemsList(learning_resource_id, limit, offset, sortby, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.learningpathsItemsList(learning_resource_id, limit, offset, sortby, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['LearningpathsApi.learningpathsItemsList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Viewset for LearningPath related resources
         * @summary Learning Path Resource Relationship Update
         * @param {number} id A unique integer value identifying this learning resource relationship.
         * @param {number} learning_resource_id The learning resource id of the learning path
         * @param {PatchedLearningPathRelationshipRequest} [PatchedLearningPathRelationshipRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsItemsPartialUpdate(id, learning_resource_id, PatchedLearningPathRelationshipRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.learningpathsItemsPartialUpdate(id, learning_resource_id, PatchedLearningPathRelationshipRequest, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['LearningpathsApi.learningpathsItemsPartialUpdate']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Get a singe related learning resource for a learning resource.
         * @summary Nested Learning Resource Retrieve
         * @param {number} id A unique integer value identifying this learning resource relationship.
         * @param {number} learning_resource_id The learning resource id of the learning path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsItemsRetrieve(id, learning_resource_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.learningpathsItemsRetrieve(id, learning_resource_id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['LearningpathsApi.learningpathsItemsRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Get a paginated list of learning paths
         * @summary List
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<LearningpathsListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<LearningpathsListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<LearningpathsListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<LearningpathsListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<LearningpathsListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {LearningpathsListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.learningpathsList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['LearningpathsApi.learningpathsList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Update individual fields of a learning path
         * @summary Update
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {PatchedLearningPathResourceRequest} [PatchedLearningPathResourceRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsPartialUpdate(id, PatchedLearningPathResourceRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.learningpathsPartialUpdate(id, PatchedLearningPathResourceRequest, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['LearningpathsApi.learningpathsPartialUpdate']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Retrive a single learning path
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsRetrieve(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.learningpathsRetrieve(id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['LearningpathsApi.learningpathsRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
exports.LearningpathsApiFp = LearningpathsApiFp;
/**
 * LearningpathsApi - factory interface
 * @export
 */
const LearningpathsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.LearningpathsApiFp)(configuration);
    return {
        /**
         * Create a learning path
         * @summary Create
         * @param {LearningpathsApiLearningpathsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsCreate(requestParameters, options) {
            return localVarFp.learningpathsCreate(requestParameters.LearningPathResourceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a learning path
         * @summary Destroy
         * @param {LearningpathsApiLearningpathsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsDestroy(requestParameters, options) {
            return localVarFp.learningpathsDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for LearningPath related resources
         * @summary Learning Path Resource Relationship Add
         * @param {LearningpathsApiLearningpathsItemsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsItemsCreate(requestParameters, options) {
            return localVarFp.learningpathsItemsCreate(requestParameters.learning_resource_id, requestParameters.LearningPathRelationshipRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for LearningPath related resources
         * @summary Learning Path Resource Relationship Remove
         * @param {LearningpathsApiLearningpathsItemsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsItemsDestroy(requestParameters, options) {
            return localVarFp.learningpathsItemsDestroy(requestParameters.id, requestParameters.learning_resource_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of related learning resources for a learning resource.
         * @summary Nested Learning Resource List
         * @param {LearningpathsApiLearningpathsItemsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsItemsList(requestParameters, options) {
            return localVarFp.learningpathsItemsList(requestParameters.learning_resource_id, requestParameters.limit, requestParameters.offset, requestParameters.sortby, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for LearningPath related resources
         * @summary Learning Path Resource Relationship Update
         * @param {LearningpathsApiLearningpathsItemsPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsItemsPartialUpdate(requestParameters, options) {
            return localVarFp.learningpathsItemsPartialUpdate(requestParameters.id, requestParameters.learning_resource_id, requestParameters.PatchedLearningPathRelationshipRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a singe related learning resource for a learning resource.
         * @summary Nested Learning Resource Retrieve
         * @param {LearningpathsApiLearningpathsItemsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsItemsRetrieve(requestParameters, options) {
            return localVarFp.learningpathsItemsRetrieve(requestParameters.id, requestParameters.learning_resource_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of learning paths
         * @summary List
         * @param {LearningpathsApiLearningpathsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsList(requestParameters = {}, options) {
            return localVarFp.learningpathsList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(axios, basePath));
        },
        /**
         * Update individual fields of a learning path
         * @summary Update
         * @param {LearningpathsApiLearningpathsPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsPartialUpdate(requestParameters, options) {
            return localVarFp.learningpathsPartialUpdate(requestParameters.id, requestParameters.PatchedLearningPathResourceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrive a single learning path
         * @summary Retrieve
         * @param {LearningpathsApiLearningpathsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsRetrieve(requestParameters, options) {
            return localVarFp.learningpathsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.LearningpathsApiFactory = LearningpathsApiFactory;
/**
 * LearningpathsApi - object-oriented interface
 * @export
 * @class LearningpathsApi
 * @extends {BaseAPI}
 */
class LearningpathsApi extends base_1.BaseAPI {
    /**
     * Create a learning path
     * @summary Create
     * @param {LearningpathsApiLearningpathsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningpathsApi
     */
    learningpathsCreate(requestParameters, options) {
        return (0, exports.LearningpathsApiFp)(this.configuration).learningpathsCreate(requestParameters.LearningPathResourceRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a learning path
     * @summary Destroy
     * @param {LearningpathsApiLearningpathsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningpathsApi
     */
    learningpathsDestroy(requestParameters, options) {
        return (0, exports.LearningpathsApiFp)(this.configuration).learningpathsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Viewset for LearningPath related resources
     * @summary Learning Path Resource Relationship Add
     * @param {LearningpathsApiLearningpathsItemsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningpathsApi
     */
    learningpathsItemsCreate(requestParameters, options) {
        return (0, exports.LearningpathsApiFp)(this.configuration).learningpathsItemsCreate(requestParameters.learning_resource_id, requestParameters.LearningPathRelationshipRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Viewset for LearningPath related resources
     * @summary Learning Path Resource Relationship Remove
     * @param {LearningpathsApiLearningpathsItemsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningpathsApi
     */
    learningpathsItemsDestroy(requestParameters, options) {
        return (0, exports.LearningpathsApiFp)(this.configuration).learningpathsItemsDestroy(requestParameters.id, requestParameters.learning_resource_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of related learning resources for a learning resource.
     * @summary Nested Learning Resource List
     * @param {LearningpathsApiLearningpathsItemsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningpathsApi
     */
    learningpathsItemsList(requestParameters, options) {
        return (0, exports.LearningpathsApiFp)(this.configuration).learningpathsItemsList(requestParameters.learning_resource_id, requestParameters.limit, requestParameters.offset, requestParameters.sortby, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Viewset for LearningPath related resources
     * @summary Learning Path Resource Relationship Update
     * @param {LearningpathsApiLearningpathsItemsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningpathsApi
     */
    learningpathsItemsPartialUpdate(requestParameters, options) {
        return (0, exports.LearningpathsApiFp)(this.configuration).learningpathsItemsPartialUpdate(requestParameters.id, requestParameters.learning_resource_id, requestParameters.PatchedLearningPathRelationshipRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a singe related learning resource for a learning resource.
     * @summary Nested Learning Resource Retrieve
     * @param {LearningpathsApiLearningpathsItemsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningpathsApi
     */
    learningpathsItemsRetrieve(requestParameters, options) {
        return (0, exports.LearningpathsApiFp)(this.configuration).learningpathsItemsRetrieve(requestParameters.id, requestParameters.learning_resource_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a paginated list of learning paths
     * @summary List
     * @param {LearningpathsApiLearningpathsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningpathsApi
     */
    learningpathsList(requestParameters = {}, options) {
        return (0, exports.LearningpathsApiFp)(this.configuration).learningpathsList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update individual fields of a learning path
     * @summary Update
     * @param {LearningpathsApiLearningpathsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningpathsApi
     */
    learningpathsPartialUpdate(requestParameters, options) {
        return (0, exports.LearningpathsApiFp)(this.configuration).learningpathsPartialUpdate(requestParameters.id, requestParameters.PatchedLearningPathResourceRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrive a single learning path
     * @summary Retrieve
     * @param {LearningpathsApiLearningpathsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningpathsApi
     */
    learningpathsRetrieve(requestParameters, options) {
        return (0, exports.LearningpathsApiFp)(this.configuration).learningpathsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.LearningpathsApi = LearningpathsApi;
/**
 * @export
 */
exports.LearningpathsListDepartmentEnum = {
    _1: '1',
    _10: '10',
    _11: '11',
    _12: '12',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _2: '2',
    _20: '20',
    _21A: '21A',
    _21G: '21G',
    _21H: '21H',
    _21L: '21L',
    _21M: '21M',
    _22: '22',
    _24: '24',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    Cc: 'CC',
    CmsW: 'CMS-W',
    Ec: 'EC',
    Es: 'ES',
    Esd: 'ESD',
    Hst: 'HST',
    Ids: 'IDS',
    Mas: 'MAS',
    Pe: 'PE',
    Res: 'RES',
    Sts: 'STS',
    Wgs: 'WGS'
};
/**
 * @export
 */
exports.LearningpathsListLevelEnum = {
    Advanced: 'advanced',
    Graduate: 'graduate',
    HighSchool: 'high_school',
    Intermediate: 'intermediate',
    Introductory: 'introductory',
    Noncredit: 'noncredit',
    Undergraduate: 'undergraduate'
};
/**
 * @export
 */
exports.LearningpathsListOfferedByEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Mitpe: 'mitpe',
    Mitx: 'mitx',
    Ocw: 'ocw',
    Scc: 'scc',
    See: 'see',
    Xpro: 'xpro'
};
/**
 * @export
 */
exports.LearningpathsListPlatformEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Edx: 'edx',
    Emeritus: 'emeritus',
    Globalalumni: 'globalalumni',
    Mitpe: 'mitpe',
    Mitxonline: 'mitxonline',
    Ocw: 'ocw',
    Oll: 'oll',
    Podcast: 'podcast',
    Scc: 'scc',
    See: 'see',
    Simplilearn: 'simplilearn',
    Susskind: 'susskind',
    Whu: 'whu',
    Xpro: 'xpro',
    Youtube: 'youtube'
};
/**
 * @export
 */
exports.LearningpathsListResourceTypeEnum = {
    Course: 'course',
    LearningPath: 'learning_path',
    Podcast: 'podcast',
    PodcastEpisode: 'podcast_episode',
    Program: 'program',
    Video: 'video',
    VideoPlaylist: 'video_playlist'
};
/**
 * @export
 */
exports.LearningpathsListSortbyEnum = {
    CreatedOn: '-created_on',
    Id: '-id',
    LastModified: '-last_modified',
    Mitcoursenumber: '-mitcoursenumber',
    ReadableId: '-readable_id',
    StartDate: '-start_date',
    CreatedOn2: 'created_on',
    Id2: 'id',
    LastModified2: 'last_modified',
    Mitcoursenumber2: 'mitcoursenumber',
    ReadableId2: 'readable_id',
    StartDate2: 'start_date'
};
/**
 * OfferorsApi - axios parameter creator
 * @export
 */
const OfferorsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * MIT organizations that offer learning resources
         * @summary List
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offerorsList: (limit_1, offset_1, ...args_1) => __awaiter(this, [limit_1, offset_1, ...args_1], void 0, function* (limit, offset, options = {}) {
            const localVarPath = `/api/v1/offerors/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * MIT organizations that offer learning resources
         * @summary Retrieve
         * @param {string} code A unique value identifying this learning resource offeror.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offerorsRetrieve: (code_1, ...args_2) => __awaiter(this, [code_1, ...args_2], void 0, function* (code, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('offerorsRetrieve', 'code', code);
            const localVarPath = `/api/v1/offerors/{code}/`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.OfferorsApiAxiosParamCreator = OfferorsApiAxiosParamCreator;
/**
 * OfferorsApi - functional programming interface
 * @export
 */
const OfferorsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.OfferorsApiAxiosParamCreator)(configuration);
    return {
        /**
         * MIT organizations that offer learning resources
         * @summary List
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offerorsList(limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.offerorsList(limit, offset, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['OfferorsApi.offerorsList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * MIT organizations that offer learning resources
         * @summary Retrieve
         * @param {string} code A unique value identifying this learning resource offeror.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offerorsRetrieve(code, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.offerorsRetrieve(code, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['OfferorsApi.offerorsRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
exports.OfferorsApiFp = OfferorsApiFp;
/**
 * OfferorsApi - factory interface
 * @export
 */
const OfferorsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.OfferorsApiFp)(configuration);
    return {
        /**
         * MIT organizations that offer learning resources
         * @summary List
         * @param {OfferorsApiOfferorsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offerorsList(requestParameters = {}, options) {
            return localVarFp.offerorsList(requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * MIT organizations that offer learning resources
         * @summary Retrieve
         * @param {OfferorsApiOfferorsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offerorsRetrieve(requestParameters, options) {
            return localVarFp.offerorsRetrieve(requestParameters.code, options).then((request) => request(axios, basePath));
        },
    };
};
exports.OfferorsApiFactory = OfferorsApiFactory;
/**
 * OfferorsApi - object-oriented interface
 * @export
 * @class OfferorsApi
 * @extends {BaseAPI}
 */
class OfferorsApi extends base_1.BaseAPI {
    /**
     * MIT organizations that offer learning resources
     * @summary List
     * @param {OfferorsApiOfferorsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferorsApi
     */
    offerorsList(requestParameters = {}, options) {
        return (0, exports.OfferorsApiFp)(this.configuration).offerorsList(requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * MIT organizations that offer learning resources
     * @summary Retrieve
     * @param {OfferorsApiOfferorsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferorsApi
     */
    offerorsRetrieve(requestParameters, options) {
        return (0, exports.OfferorsApiFp)(this.configuration).offerorsRetrieve(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.OfferorsApi = OfferorsApi;
/**
 * PlatformsApi - axios parameter creator
 * @export
 */
const PlatformsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Platforms on which learning resources are hosted
         * @summary List
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformsList: (limit_1, offset_1, ...args_1) => __awaiter(this, [limit_1, offset_1, ...args_1], void 0, function* (limit, offset, options = {}) {
            const localVarPath = `/api/v1/platforms/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Platforms on which learning resources are hosted
         * @summary Retrieve
         * @param {string} code A unique value identifying this learning resource platform.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformsRetrieve: (code_1, ...args_2) => __awaiter(this, [code_1, ...args_2], void 0, function* (code, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('platformsRetrieve', 'code', code);
            const localVarPath = `/api/v1/platforms/{code}/`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.PlatformsApiAxiosParamCreator = PlatformsApiAxiosParamCreator;
/**
 * PlatformsApi - functional programming interface
 * @export
 */
const PlatformsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PlatformsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Platforms on which learning resources are hosted
         * @summary List
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformsList(limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.platformsList(limit, offset, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['PlatformsApi.platformsList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Platforms on which learning resources are hosted
         * @summary Retrieve
         * @param {string} code A unique value identifying this learning resource platform.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformsRetrieve(code, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.platformsRetrieve(code, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['PlatformsApi.platformsRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
exports.PlatformsApiFp = PlatformsApiFp;
/**
 * PlatformsApi - factory interface
 * @export
 */
const PlatformsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PlatformsApiFp)(configuration);
    return {
        /**
         * Platforms on which learning resources are hosted
         * @summary List
         * @param {PlatformsApiPlatformsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformsList(requestParameters = {}, options) {
            return localVarFp.platformsList(requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Platforms on which learning resources are hosted
         * @summary Retrieve
         * @param {PlatformsApiPlatformsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformsRetrieve(requestParameters, options) {
            return localVarFp.platformsRetrieve(requestParameters.code, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PlatformsApiFactory = PlatformsApiFactory;
/**
 * PlatformsApi - object-oriented interface
 * @export
 * @class PlatformsApi
 * @extends {BaseAPI}
 */
class PlatformsApi extends base_1.BaseAPI {
    /**
     * Platforms on which learning resources are hosted
     * @summary List
     * @param {PlatformsApiPlatformsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    platformsList(requestParameters = {}, options) {
        return (0, exports.PlatformsApiFp)(this.configuration).platformsList(requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Platforms on which learning resources are hosted
     * @summary Retrieve
     * @param {PlatformsApiPlatformsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    platformsRetrieve(requestParameters, options) {
        return (0, exports.PlatformsApiFp)(this.configuration).platformsRetrieve(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PlatformsApi = PlatformsApi;
/**
 * PodcastEpisodesApi - axios parameter creator
 * @export
 */
const PodcastEpisodesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get a paginated list of podcast episodes
         * @summary List
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<PodcastEpisodesListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<PodcastEpisodesListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<PodcastEpisodesListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<PodcastEpisodesListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<PodcastEpisodesListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {PodcastEpisodesListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastEpisodesList: (course_feature_1, department_1, level_1, limit_1, offered_by_1, offset_1, platform_1, professional_1, resource_type_1, sortby_1, topic_1, ...args_1) => __awaiter(this, [course_feature_1, department_1, level_1, limit_1, offered_by_1, offset_1, platform_1, professional_1, resource_type_1, sortby_1, topic_1, ...args_1], void 0, function* (course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options = {}) {
            const localVarPath = `/api/v1/podcast_episodes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (course_feature) {
                localVarQueryParameter['course_feature'] = course_feature.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (department) {
                localVarQueryParameter['department'] = department;
            }
            if (level) {
                localVarQueryParameter['level'] = level;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (professional !== undefined) {
                localVarQueryParameter['professional'] = professional;
            }
            if (resource_type) {
                localVarQueryParameter['resource_type'] = resource_type;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            if (topic) {
                localVarQueryParameter['topic'] = topic.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve a single podcast episode
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastEpisodesRetrieve: (id_1, ...args_2) => __awaiter(this, [id_1, ...args_2], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('podcastEpisodesRetrieve', 'id', id);
            const localVarPath = `/api/v1/podcast_episodes/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.PodcastEpisodesApiAxiosParamCreator = PodcastEpisodesApiAxiosParamCreator;
/**
 * PodcastEpisodesApi - functional programming interface
 * @export
 */
const PodcastEpisodesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PodcastEpisodesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get a paginated list of podcast episodes
         * @summary List
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<PodcastEpisodesListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<PodcastEpisodesListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<PodcastEpisodesListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<PodcastEpisodesListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<PodcastEpisodesListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {PodcastEpisodesListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastEpisodesList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.podcastEpisodesList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['PodcastEpisodesApi.podcastEpisodesList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Retrieve a single podcast episode
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastEpisodesRetrieve(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.podcastEpisodesRetrieve(id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['PodcastEpisodesApi.podcastEpisodesRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
exports.PodcastEpisodesApiFp = PodcastEpisodesApiFp;
/**
 * PodcastEpisodesApi - factory interface
 * @export
 */
const PodcastEpisodesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PodcastEpisodesApiFp)(configuration);
    return {
        /**
         * Get a paginated list of podcast episodes
         * @summary List
         * @param {PodcastEpisodesApiPodcastEpisodesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastEpisodesList(requestParameters = {}, options) {
            return localVarFp.podcastEpisodesList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single podcast episode
         * @summary Retrieve
         * @param {PodcastEpisodesApiPodcastEpisodesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastEpisodesRetrieve(requestParameters, options) {
            return localVarFp.podcastEpisodesRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PodcastEpisodesApiFactory = PodcastEpisodesApiFactory;
/**
 * PodcastEpisodesApi - object-oriented interface
 * @export
 * @class PodcastEpisodesApi
 * @extends {BaseAPI}
 */
class PodcastEpisodesApi extends base_1.BaseAPI {
    /**
     * Get a paginated list of podcast episodes
     * @summary List
     * @param {PodcastEpisodesApiPodcastEpisodesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PodcastEpisodesApi
     */
    podcastEpisodesList(requestParameters = {}, options) {
        return (0, exports.PodcastEpisodesApiFp)(this.configuration).podcastEpisodesList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a single podcast episode
     * @summary Retrieve
     * @param {PodcastEpisodesApiPodcastEpisodesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PodcastEpisodesApi
     */
    podcastEpisodesRetrieve(requestParameters, options) {
        return (0, exports.PodcastEpisodesApiFp)(this.configuration).podcastEpisodesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PodcastEpisodesApi = PodcastEpisodesApi;
/**
 * @export
 */
exports.PodcastEpisodesListDepartmentEnum = {
    _1: '1',
    _10: '10',
    _11: '11',
    _12: '12',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _2: '2',
    _20: '20',
    _21A: '21A',
    _21G: '21G',
    _21H: '21H',
    _21L: '21L',
    _21M: '21M',
    _22: '22',
    _24: '24',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    Cc: 'CC',
    CmsW: 'CMS-W',
    Ec: 'EC',
    Es: 'ES',
    Esd: 'ESD',
    Hst: 'HST',
    Ids: 'IDS',
    Mas: 'MAS',
    Pe: 'PE',
    Res: 'RES',
    Sts: 'STS',
    Wgs: 'WGS'
};
/**
 * @export
 */
exports.PodcastEpisodesListLevelEnum = {
    Advanced: 'advanced',
    Graduate: 'graduate',
    HighSchool: 'high_school',
    Intermediate: 'intermediate',
    Introductory: 'introductory',
    Noncredit: 'noncredit',
    Undergraduate: 'undergraduate'
};
/**
 * @export
 */
exports.PodcastEpisodesListOfferedByEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Mitpe: 'mitpe',
    Mitx: 'mitx',
    Ocw: 'ocw',
    Scc: 'scc',
    See: 'see',
    Xpro: 'xpro'
};
/**
 * @export
 */
exports.PodcastEpisodesListPlatformEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Edx: 'edx',
    Emeritus: 'emeritus',
    Globalalumni: 'globalalumni',
    Mitpe: 'mitpe',
    Mitxonline: 'mitxonline',
    Ocw: 'ocw',
    Oll: 'oll',
    Podcast: 'podcast',
    Scc: 'scc',
    See: 'see',
    Simplilearn: 'simplilearn',
    Susskind: 'susskind',
    Whu: 'whu',
    Xpro: 'xpro',
    Youtube: 'youtube'
};
/**
 * @export
 */
exports.PodcastEpisodesListResourceTypeEnum = {
    Course: 'course',
    LearningPath: 'learning_path',
    Podcast: 'podcast',
    PodcastEpisode: 'podcast_episode',
    Program: 'program',
    Video: 'video',
    VideoPlaylist: 'video_playlist'
};
/**
 * @export
 */
exports.PodcastEpisodesListSortbyEnum = {
    CreatedOn: '-created_on',
    Id: '-id',
    LastModified: '-last_modified',
    Mitcoursenumber: '-mitcoursenumber',
    ReadableId: '-readable_id',
    StartDate: '-start_date',
    CreatedOn2: 'created_on',
    Id2: 'id',
    LastModified2: 'last_modified',
    Mitcoursenumber2: 'mitcoursenumber',
    ReadableId2: 'readable_id',
    StartDate2: 'start_date'
};
/**
 * PodcastsApi - axios parameter creator
 * @export
 */
const PodcastsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get a list of related learning resources for a learning resource.
         * @summary Nested Learning Resource List
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [sortby] Which field to use when ordering the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsItemsList: (learning_resource_id_1, limit_1, offset_1, sortby_1, ...args_1) => __awaiter(this, [learning_resource_id_1, limit_1, offset_1, sortby_1, ...args_1], void 0, function* (learning_resource_id, limit, offset, sortby, options = {}) {
            // verify required parameter 'learning_resource_id' is not null or undefined
            (0, common_1.assertParamExists)('podcastsItemsList', 'learning_resource_id', learning_resource_id);
            const localVarPath = `/api/v1/podcasts/{learning_resource_id}/items/`
                .replace(`{${"learning_resource_id"}}`, encodeURIComponent(String(learning_resource_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a singe related learning resource for a learning resource.
         * @summary Nested Learning Resource Retrieve
         * @param {number} id A unique integer value identifying this learning resource relationship.
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsItemsRetrieve: (id_1, learning_resource_id_2, ...args_2) => __awaiter(this, [id_1, learning_resource_id_2, ...args_2], void 0, function* (id, learning_resource_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('podcastsItemsRetrieve', 'id', id);
            // verify required parameter 'learning_resource_id' is not null or undefined
            (0, common_1.assertParamExists)('podcastsItemsRetrieve', 'learning_resource_id', learning_resource_id);
            const localVarPath = `/api/v1/podcasts/{learning_resource_id}/items/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"learning_resource_id"}}`, encodeURIComponent(String(learning_resource_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a paginated list of podcasts
         * @summary List
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<PodcastsListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<PodcastsListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<PodcastsListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<PodcastsListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<PodcastsListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {PodcastsListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsList: (course_feature_1, department_1, level_1, limit_2, offered_by_1, offset_2, platform_1, professional_1, resource_type_1, sortby_2, topic_1, ...args_3) => __awaiter(this, [course_feature_1, department_1, level_1, limit_2, offered_by_1, offset_2, platform_1, professional_1, resource_type_1, sortby_2, topic_1, ...args_3], void 0, function* (course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options = {}) {
            const localVarPath = `/api/v1/podcasts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (course_feature) {
                localVarQueryParameter['course_feature'] = course_feature.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (department) {
                localVarQueryParameter['department'] = department;
            }
            if (level) {
                localVarQueryParameter['level'] = level;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (professional !== undefined) {
                localVarQueryParameter['professional'] = professional;
            }
            if (resource_type) {
                localVarQueryParameter['resource_type'] = resource_type;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            if (topic) {
                localVarQueryParameter['topic'] = topic.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve a single podcast
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsRetrieve: (id_2, ...args_4) => __awaiter(this, [id_2, ...args_4], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('podcastsRetrieve', 'id', id);
            const localVarPath = `/api/v1/podcasts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.PodcastsApiAxiosParamCreator = PodcastsApiAxiosParamCreator;
/**
 * PodcastsApi - functional programming interface
 * @export
 */
const PodcastsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PodcastsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get a list of related learning resources for a learning resource.
         * @summary Nested Learning Resource List
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [sortby] Which field to use when ordering the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsItemsList(learning_resource_id, limit, offset, sortby, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.podcastsItemsList(learning_resource_id, limit, offset, sortby, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['PodcastsApi.podcastsItemsList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Get a singe related learning resource for a learning resource.
         * @summary Nested Learning Resource Retrieve
         * @param {number} id A unique integer value identifying this learning resource relationship.
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsItemsRetrieve(id, learning_resource_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.podcastsItemsRetrieve(id, learning_resource_id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['PodcastsApi.podcastsItemsRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Get a paginated list of podcasts
         * @summary List
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<PodcastsListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<PodcastsListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<PodcastsListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<PodcastsListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<PodcastsListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {PodcastsListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.podcastsList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['PodcastsApi.podcastsList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Retrieve a single podcast
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsRetrieve(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.podcastsRetrieve(id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['PodcastsApi.podcastsRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
exports.PodcastsApiFp = PodcastsApiFp;
/**
 * PodcastsApi - factory interface
 * @export
 */
const PodcastsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PodcastsApiFp)(configuration);
    return {
        /**
         * Get a list of related learning resources for a learning resource.
         * @summary Nested Learning Resource List
         * @param {PodcastsApiPodcastsItemsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsItemsList(requestParameters, options) {
            return localVarFp.podcastsItemsList(requestParameters.learning_resource_id, requestParameters.limit, requestParameters.offset, requestParameters.sortby, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a singe related learning resource for a learning resource.
         * @summary Nested Learning Resource Retrieve
         * @param {PodcastsApiPodcastsItemsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsItemsRetrieve(requestParameters, options) {
            return localVarFp.podcastsItemsRetrieve(requestParameters.id, requestParameters.learning_resource_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of podcasts
         * @summary List
         * @param {PodcastsApiPodcastsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsList(requestParameters = {}, options) {
            return localVarFp.podcastsList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single podcast
         * @summary Retrieve
         * @param {PodcastsApiPodcastsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsRetrieve(requestParameters, options) {
            return localVarFp.podcastsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PodcastsApiFactory = PodcastsApiFactory;
/**
 * PodcastsApi - object-oriented interface
 * @export
 * @class PodcastsApi
 * @extends {BaseAPI}
 */
class PodcastsApi extends base_1.BaseAPI {
    /**
     * Get a list of related learning resources for a learning resource.
     * @summary Nested Learning Resource List
     * @param {PodcastsApiPodcastsItemsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PodcastsApi
     */
    podcastsItemsList(requestParameters, options) {
        return (0, exports.PodcastsApiFp)(this.configuration).podcastsItemsList(requestParameters.learning_resource_id, requestParameters.limit, requestParameters.offset, requestParameters.sortby, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a singe related learning resource for a learning resource.
     * @summary Nested Learning Resource Retrieve
     * @param {PodcastsApiPodcastsItemsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PodcastsApi
     */
    podcastsItemsRetrieve(requestParameters, options) {
        return (0, exports.PodcastsApiFp)(this.configuration).podcastsItemsRetrieve(requestParameters.id, requestParameters.learning_resource_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a paginated list of podcasts
     * @summary List
     * @param {PodcastsApiPodcastsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PodcastsApi
     */
    podcastsList(requestParameters = {}, options) {
        return (0, exports.PodcastsApiFp)(this.configuration).podcastsList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a single podcast
     * @summary Retrieve
     * @param {PodcastsApiPodcastsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PodcastsApi
     */
    podcastsRetrieve(requestParameters, options) {
        return (0, exports.PodcastsApiFp)(this.configuration).podcastsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PodcastsApi = PodcastsApi;
/**
 * @export
 */
exports.PodcastsListDepartmentEnum = {
    _1: '1',
    _10: '10',
    _11: '11',
    _12: '12',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _2: '2',
    _20: '20',
    _21A: '21A',
    _21G: '21G',
    _21H: '21H',
    _21L: '21L',
    _21M: '21M',
    _22: '22',
    _24: '24',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    Cc: 'CC',
    CmsW: 'CMS-W',
    Ec: 'EC',
    Es: 'ES',
    Esd: 'ESD',
    Hst: 'HST',
    Ids: 'IDS',
    Mas: 'MAS',
    Pe: 'PE',
    Res: 'RES',
    Sts: 'STS',
    Wgs: 'WGS'
};
/**
 * @export
 */
exports.PodcastsListLevelEnum = {
    Advanced: 'advanced',
    Graduate: 'graduate',
    HighSchool: 'high_school',
    Intermediate: 'intermediate',
    Introductory: 'introductory',
    Noncredit: 'noncredit',
    Undergraduate: 'undergraduate'
};
/**
 * @export
 */
exports.PodcastsListOfferedByEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Mitpe: 'mitpe',
    Mitx: 'mitx',
    Ocw: 'ocw',
    Scc: 'scc',
    See: 'see',
    Xpro: 'xpro'
};
/**
 * @export
 */
exports.PodcastsListPlatformEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Edx: 'edx',
    Emeritus: 'emeritus',
    Globalalumni: 'globalalumni',
    Mitpe: 'mitpe',
    Mitxonline: 'mitxonline',
    Ocw: 'ocw',
    Oll: 'oll',
    Podcast: 'podcast',
    Scc: 'scc',
    See: 'see',
    Simplilearn: 'simplilearn',
    Susskind: 'susskind',
    Whu: 'whu',
    Xpro: 'xpro',
    Youtube: 'youtube'
};
/**
 * @export
 */
exports.PodcastsListResourceTypeEnum = {
    Course: 'course',
    LearningPath: 'learning_path',
    Podcast: 'podcast',
    PodcastEpisode: 'podcast_episode',
    Program: 'program',
    Video: 'video',
    VideoPlaylist: 'video_playlist'
};
/**
 * @export
 */
exports.PodcastsListSortbyEnum = {
    CreatedOn: '-created_on',
    Id: '-id',
    LastModified: '-last_modified',
    Mitcoursenumber: '-mitcoursenumber',
    ReadableId: '-readable_id',
    StartDate: '-start_date',
    CreatedOn2: 'created_on',
    Id2: 'id',
    LastModified2: 'last_modified',
    Mitcoursenumber2: 'mitcoursenumber',
    ReadableId2: 'readable_id',
    StartDate2: 'start_date'
};
/**
 * ProgramsApi - axios parameter creator
 * @export
 */
const ProgramsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get a paginated list of programs
         * @summary List
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<ProgramsListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<ProgramsListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<ProgramsListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<ProgramsListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<ProgramsListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {ProgramsListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsList: (course_feature_1, department_1, level_1, limit_1, offered_by_1, offset_1, platform_1, professional_1, resource_type_1, sortby_1, topic_1, ...args_1) => __awaiter(this, [course_feature_1, department_1, level_1, limit_1, offered_by_1, offset_1, platform_1, professional_1, resource_type_1, sortby_1, topic_1, ...args_1], void 0, function* (course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options = {}) {
            const localVarPath = `/api/v1/programs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (course_feature) {
                localVarQueryParameter['course_feature'] = course_feature.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (department) {
                localVarQueryParameter['department'] = department;
            }
            if (level) {
                localVarQueryParameter['level'] = level;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (professional !== undefined) {
                localVarQueryParameter['professional'] = professional;
            }
            if (resource_type) {
                localVarQueryParameter['resource_type'] = resource_type;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            if (topic) {
                localVarQueryParameter['topic'] = topic.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a paginated list of newly released Programs.
         * @summary List New
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<ProgramsNewListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<ProgramsNewListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<ProgramsNewListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<ProgramsNewListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<ProgramsNewListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {ProgramsNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsNewList: (course_feature_2, department_2, level_2, limit_2, offered_by_2, offset_2, platform_2, professional_2, resource_type_2, sortby_2, topic_2, ...args_2) => __awaiter(this, [course_feature_2, department_2, level_2, limit_2, offered_by_2, offset_2, platform_2, professional_2, resource_type_2, sortby_2, topic_2, ...args_2], void 0, function* (course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options = {}) {
            const localVarPath = `/api/v1/programs/new/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (course_feature) {
                localVarQueryParameter['course_feature'] = course_feature.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (department) {
                localVarQueryParameter['department'] = department;
            }
            if (level) {
                localVarQueryParameter['level'] = level;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (professional !== undefined) {
                localVarQueryParameter['professional'] = professional;
            }
            if (resource_type) {
                localVarQueryParameter['resource_type'] = resource_type;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            if (topic) {
                localVarQueryParameter['topic'] = topic.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve a single program
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsRetrieve: (id_1, ...args_3) => __awaiter(this, [id_1, ...args_3], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('programsRetrieve', 'id', id);
            const localVarPath = `/api/v1/programs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a paginated list of upcoming Programs.
         * @summary List Upcoming
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<ProgramsUpcomingListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<ProgramsUpcomingListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<ProgramsUpcomingListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<ProgramsUpcomingListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<ProgramsUpcomingListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {ProgramsUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsUpcomingList: (course_feature_3, department_3, level_3, limit_3, offered_by_3, offset_3, platform_3, professional_3, resource_type_3, sortby_3, topic_3, ...args_4) => __awaiter(this, [course_feature_3, department_3, level_3, limit_3, offered_by_3, offset_3, platform_3, professional_3, resource_type_3, sortby_3, topic_3, ...args_4], void 0, function* (course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options = {}) {
            const localVarPath = `/api/v1/programs/upcoming/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (course_feature) {
                localVarQueryParameter['course_feature'] = course_feature.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (department) {
                localVarQueryParameter['department'] = department;
            }
            if (level) {
                localVarQueryParameter['level'] = level;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (professional !== undefined) {
                localVarQueryParameter['professional'] = professional;
            }
            if (resource_type) {
                localVarQueryParameter['resource_type'] = resource_type;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            if (topic) {
                localVarQueryParameter['topic'] = topic.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ProgramsApiAxiosParamCreator = ProgramsApiAxiosParamCreator;
/**
 * ProgramsApi - functional programming interface
 * @export
 */
const ProgramsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ProgramsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get a paginated list of programs
         * @summary List
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<ProgramsListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<ProgramsListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<ProgramsListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<ProgramsListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<ProgramsListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {ProgramsListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.programsList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['ProgramsApi.programsList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Get a paginated list of newly released Programs.
         * @summary List New
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<ProgramsNewListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<ProgramsNewListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<ProgramsNewListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<ProgramsNewListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<ProgramsNewListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {ProgramsNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsNewList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.programsNewList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['ProgramsApi.programsNewList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Retrieve a single program
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsRetrieve(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.programsRetrieve(id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['ProgramsApi.programsRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Get a paginated list of upcoming Programs.
         * @summary List Upcoming
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<ProgramsUpcomingListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<ProgramsUpcomingListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<ProgramsUpcomingListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<ProgramsUpcomingListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<ProgramsUpcomingListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {ProgramsUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsUpcomingList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.programsUpcomingList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['ProgramsApi.programsUpcomingList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
exports.ProgramsApiFp = ProgramsApiFp;
/**
 * ProgramsApi - factory interface
 * @export
 */
const ProgramsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ProgramsApiFp)(configuration);
    return {
        /**
         * Get a paginated list of programs
         * @summary List
         * @param {ProgramsApiProgramsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsList(requestParameters = {}, options) {
            return localVarFp.programsList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of newly released Programs.
         * @summary List New
         * @param {ProgramsApiProgramsNewListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsNewList(requestParameters = {}, options) {
            return localVarFp.programsNewList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single program
         * @summary Retrieve
         * @param {ProgramsApiProgramsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsRetrieve(requestParameters, options) {
            return localVarFp.programsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of upcoming Programs.
         * @summary List Upcoming
         * @param {ProgramsApiProgramsUpcomingListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsUpcomingList(requestParameters = {}, options) {
            return localVarFp.programsUpcomingList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ProgramsApiFactory = ProgramsApiFactory;
/**
 * ProgramsApi - object-oriented interface
 * @export
 * @class ProgramsApi
 * @extends {BaseAPI}
 */
class ProgramsApi extends base_1.BaseAPI {
    /**
     * Get a paginated list of programs
     * @summary List
     * @param {ProgramsApiProgramsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    programsList(requestParameters = {}, options) {
        return (0, exports.ProgramsApiFp)(this.configuration).programsList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a paginated list of newly released Programs.
     * @summary List New
     * @param {ProgramsApiProgramsNewListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    programsNewList(requestParameters = {}, options) {
        return (0, exports.ProgramsApiFp)(this.configuration).programsNewList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a single program
     * @summary Retrieve
     * @param {ProgramsApiProgramsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    programsRetrieve(requestParameters, options) {
        return (0, exports.ProgramsApiFp)(this.configuration).programsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a paginated list of upcoming Programs.
     * @summary List Upcoming
     * @param {ProgramsApiProgramsUpcomingListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    programsUpcomingList(requestParameters = {}, options) {
        return (0, exports.ProgramsApiFp)(this.configuration).programsUpcomingList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ProgramsApi = ProgramsApi;
/**
 * @export
 */
exports.ProgramsListDepartmentEnum = {
    _1: '1',
    _10: '10',
    _11: '11',
    _12: '12',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _2: '2',
    _20: '20',
    _21A: '21A',
    _21G: '21G',
    _21H: '21H',
    _21L: '21L',
    _21M: '21M',
    _22: '22',
    _24: '24',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    Cc: 'CC',
    CmsW: 'CMS-W',
    Ec: 'EC',
    Es: 'ES',
    Esd: 'ESD',
    Hst: 'HST',
    Ids: 'IDS',
    Mas: 'MAS',
    Pe: 'PE',
    Res: 'RES',
    Sts: 'STS',
    Wgs: 'WGS'
};
/**
 * @export
 */
exports.ProgramsListLevelEnum = {
    Advanced: 'advanced',
    Graduate: 'graduate',
    HighSchool: 'high_school',
    Intermediate: 'intermediate',
    Introductory: 'introductory',
    Noncredit: 'noncredit',
    Undergraduate: 'undergraduate'
};
/**
 * @export
 */
exports.ProgramsListOfferedByEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Mitpe: 'mitpe',
    Mitx: 'mitx',
    Ocw: 'ocw',
    Scc: 'scc',
    See: 'see',
    Xpro: 'xpro'
};
/**
 * @export
 */
exports.ProgramsListPlatformEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Edx: 'edx',
    Emeritus: 'emeritus',
    Globalalumni: 'globalalumni',
    Mitpe: 'mitpe',
    Mitxonline: 'mitxonline',
    Ocw: 'ocw',
    Oll: 'oll',
    Podcast: 'podcast',
    Scc: 'scc',
    See: 'see',
    Simplilearn: 'simplilearn',
    Susskind: 'susskind',
    Whu: 'whu',
    Xpro: 'xpro',
    Youtube: 'youtube'
};
/**
 * @export
 */
exports.ProgramsListResourceTypeEnum = {
    Course: 'course',
    LearningPath: 'learning_path',
    Podcast: 'podcast',
    PodcastEpisode: 'podcast_episode',
    Program: 'program',
    Video: 'video',
    VideoPlaylist: 'video_playlist'
};
/**
 * @export
 */
exports.ProgramsListSortbyEnum = {
    CreatedOn: '-created_on',
    Id: '-id',
    LastModified: '-last_modified',
    Mitcoursenumber: '-mitcoursenumber',
    ReadableId: '-readable_id',
    StartDate: '-start_date',
    CreatedOn2: 'created_on',
    Id2: 'id',
    LastModified2: 'last_modified',
    Mitcoursenumber2: 'mitcoursenumber',
    ReadableId2: 'readable_id',
    StartDate2: 'start_date'
};
/**
 * @export
 */
exports.ProgramsNewListDepartmentEnum = {
    _1: '1',
    _10: '10',
    _11: '11',
    _12: '12',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _2: '2',
    _20: '20',
    _21A: '21A',
    _21G: '21G',
    _21H: '21H',
    _21L: '21L',
    _21M: '21M',
    _22: '22',
    _24: '24',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    Cc: 'CC',
    CmsW: 'CMS-W',
    Ec: 'EC',
    Es: 'ES',
    Esd: 'ESD',
    Hst: 'HST',
    Ids: 'IDS',
    Mas: 'MAS',
    Pe: 'PE',
    Res: 'RES',
    Sts: 'STS',
    Wgs: 'WGS'
};
/**
 * @export
 */
exports.ProgramsNewListLevelEnum = {
    Advanced: 'advanced',
    Graduate: 'graduate',
    HighSchool: 'high_school',
    Intermediate: 'intermediate',
    Introductory: 'introductory',
    Noncredit: 'noncredit',
    Undergraduate: 'undergraduate'
};
/**
 * @export
 */
exports.ProgramsNewListOfferedByEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Mitpe: 'mitpe',
    Mitx: 'mitx',
    Ocw: 'ocw',
    Scc: 'scc',
    See: 'see',
    Xpro: 'xpro'
};
/**
 * @export
 */
exports.ProgramsNewListPlatformEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Edx: 'edx',
    Emeritus: 'emeritus',
    Globalalumni: 'globalalumni',
    Mitpe: 'mitpe',
    Mitxonline: 'mitxonline',
    Ocw: 'ocw',
    Oll: 'oll',
    Podcast: 'podcast',
    Scc: 'scc',
    See: 'see',
    Simplilearn: 'simplilearn',
    Susskind: 'susskind',
    Whu: 'whu',
    Xpro: 'xpro',
    Youtube: 'youtube'
};
/**
 * @export
 */
exports.ProgramsNewListResourceTypeEnum = {
    Course: 'course',
    LearningPath: 'learning_path',
    Podcast: 'podcast',
    PodcastEpisode: 'podcast_episode',
    Program: 'program',
    Video: 'video',
    VideoPlaylist: 'video_playlist'
};
/**
 * @export
 */
exports.ProgramsNewListSortbyEnum = {
    CreatedOn: '-created_on',
    Id: '-id',
    LastModified: '-last_modified',
    Mitcoursenumber: '-mitcoursenumber',
    ReadableId: '-readable_id',
    StartDate: '-start_date',
    CreatedOn2: 'created_on',
    Id2: 'id',
    LastModified2: 'last_modified',
    Mitcoursenumber2: 'mitcoursenumber',
    ReadableId2: 'readable_id',
    StartDate2: 'start_date'
};
/**
 * @export
 */
exports.ProgramsUpcomingListDepartmentEnum = {
    _1: '1',
    _10: '10',
    _11: '11',
    _12: '12',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _2: '2',
    _20: '20',
    _21A: '21A',
    _21G: '21G',
    _21H: '21H',
    _21L: '21L',
    _21M: '21M',
    _22: '22',
    _24: '24',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    Cc: 'CC',
    CmsW: 'CMS-W',
    Ec: 'EC',
    Es: 'ES',
    Esd: 'ESD',
    Hst: 'HST',
    Ids: 'IDS',
    Mas: 'MAS',
    Pe: 'PE',
    Res: 'RES',
    Sts: 'STS',
    Wgs: 'WGS'
};
/**
 * @export
 */
exports.ProgramsUpcomingListLevelEnum = {
    Advanced: 'advanced',
    Graduate: 'graduate',
    HighSchool: 'high_school',
    Intermediate: 'intermediate',
    Introductory: 'introductory',
    Noncredit: 'noncredit',
    Undergraduate: 'undergraduate'
};
/**
 * @export
 */
exports.ProgramsUpcomingListOfferedByEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Mitpe: 'mitpe',
    Mitx: 'mitx',
    Ocw: 'ocw',
    Scc: 'scc',
    See: 'see',
    Xpro: 'xpro'
};
/**
 * @export
 */
exports.ProgramsUpcomingListPlatformEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Edx: 'edx',
    Emeritus: 'emeritus',
    Globalalumni: 'globalalumni',
    Mitpe: 'mitpe',
    Mitxonline: 'mitxonline',
    Ocw: 'ocw',
    Oll: 'oll',
    Podcast: 'podcast',
    Scc: 'scc',
    See: 'see',
    Simplilearn: 'simplilearn',
    Susskind: 'susskind',
    Whu: 'whu',
    Xpro: 'xpro',
    Youtube: 'youtube'
};
/**
 * @export
 */
exports.ProgramsUpcomingListResourceTypeEnum = {
    Course: 'course',
    LearningPath: 'learning_path',
    Podcast: 'podcast',
    PodcastEpisode: 'podcast_episode',
    Program: 'program',
    Video: 'video',
    VideoPlaylist: 'video_playlist'
};
/**
 * @export
 */
exports.ProgramsUpcomingListSortbyEnum = {
    CreatedOn: '-created_on',
    Id: '-id',
    LastModified: '-last_modified',
    Mitcoursenumber: '-mitcoursenumber',
    ReadableId: '-readable_id',
    StartDate: '-start_date',
    CreatedOn2: 'created_on',
    Id2: 'id',
    LastModified2: 'last_modified',
    Mitcoursenumber2: 'mitcoursenumber',
    ReadableId2: 'readable_id',
    StartDate2: 'start_date'
};
/**
 * TopicsApi - axios parameter creator
 * @export
 */
const TopicsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Topics covered by learning resources
         * @summary List
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicsList: (limit_1, offset_1, ...args_1) => __awaiter(this, [limit_1, offset_1, ...args_1], void 0, function* (limit, offset, options = {}) {
            const localVarPath = `/api/v1/topics/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Topics covered by learning resources
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource topic.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicsRetrieve: (id_1, ...args_2) => __awaiter(this, [id_1, ...args_2], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('topicsRetrieve', 'id', id);
            const localVarPath = `/api/v1/topics/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.TopicsApiAxiosParamCreator = TopicsApiAxiosParamCreator;
/**
 * TopicsApi - functional programming interface
 * @export
 */
const TopicsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.TopicsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Topics covered by learning resources
         * @summary List
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicsList(limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.topicsList(limit, offset, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['TopicsApi.topicsList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Topics covered by learning resources
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource topic.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicsRetrieve(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.topicsRetrieve(id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['TopicsApi.topicsRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
exports.TopicsApiFp = TopicsApiFp;
/**
 * TopicsApi - factory interface
 * @export
 */
const TopicsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.TopicsApiFp)(configuration);
    return {
        /**
         * Topics covered by learning resources
         * @summary List
         * @param {TopicsApiTopicsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicsList(requestParameters = {}, options) {
            return localVarFp.topicsList(requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Topics covered by learning resources
         * @summary Retrieve
         * @param {TopicsApiTopicsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicsRetrieve(requestParameters, options) {
            return localVarFp.topicsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.TopicsApiFactory = TopicsApiFactory;
/**
 * TopicsApi - object-oriented interface
 * @export
 * @class TopicsApi
 * @extends {BaseAPI}
 */
class TopicsApi extends base_1.BaseAPI {
    /**
     * Topics covered by learning resources
     * @summary List
     * @param {TopicsApiTopicsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApi
     */
    topicsList(requestParameters = {}, options) {
        return (0, exports.TopicsApiFp)(this.configuration).topicsList(requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Topics covered by learning resources
     * @summary Retrieve
     * @param {TopicsApiTopicsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApi
     */
    topicsRetrieve(requestParameters, options) {
        return (0, exports.TopicsApiFp)(this.configuration).topicsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TopicsApi = TopicsApi;
/**
 * UserlistsApi - axios parameter creator
 * @export
 */
const UserlistsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Viewset for UserLists
         * @summary Create
         * @param {UserListRequest} UserListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsCreate: (UserListRequest_1, ...args_1) => __awaiter(this, [UserListRequest_1, ...args_1], void 0, function* (UserListRequest, options = {}) {
            // verify required parameter 'UserListRequest' is not null or undefined
            (0, common_1.assertParamExists)('userlistsCreate', 'UserListRequest', UserListRequest);
            const localVarPath = `/api/v1/userlists/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(UserListRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Viewset for UserLists
         * @summary Destroy
         * @param {number} id A unique integer value identifying this user list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsDestroy: (id_1, ...args_2) => __awaiter(this, [id_1, ...args_2], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('userlistsDestroy', 'id', id);
            const localVarPath = `/api/v1/userlists/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Viewset for UserListRelationships
         * @summary User List Resource Relationship Add
         * @param {number} userlist_id id of the parent user list
         * @param {UserListRelationshipRequest} UserListRelationshipRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsItemsCreate: (userlist_id_1, UserListRelationshipRequest_1, ...args_3) => __awaiter(this, [userlist_id_1, UserListRelationshipRequest_1, ...args_3], void 0, function* (userlist_id, UserListRelationshipRequest, options = {}) {
            // verify required parameter 'userlist_id' is not null or undefined
            (0, common_1.assertParamExists)('userlistsItemsCreate', 'userlist_id', userlist_id);
            // verify required parameter 'UserListRelationshipRequest' is not null or undefined
            (0, common_1.assertParamExists)('userlistsItemsCreate', 'UserListRelationshipRequest', UserListRelationshipRequest);
            const localVarPath = `/api/v1/userlists/{userlist_id}/items/`
                .replace(`{${"userlist_id"}}`, encodeURIComponent(String(userlist_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(UserListRelationshipRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Viewset for UserListRelationships
         * @summary User List Resource Relationship Remove
         * @param {number} id A unique integer value identifying this user list relationship.
         * @param {number} userlist_id id of the parent user list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsItemsDestroy: (id_2, userlist_id_2, ...args_4) => __awaiter(this, [id_2, userlist_id_2, ...args_4], void 0, function* (id, userlist_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('userlistsItemsDestroy', 'id', id);
            // verify required parameter 'userlist_id' is not null or undefined
            (0, common_1.assertParamExists)('userlistsItemsDestroy', 'userlist_id', userlist_id);
            const localVarPath = `/api/v1/userlists/{userlist_id}/items/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userlist_id"}}`, encodeURIComponent(String(userlist_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Viewset for UserListRelationships
         * @summary User List Resources List
         * @param {number} userlist_id id of the parent user list
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsItemsList: (userlist_id_3, limit_1, offset_1, ...args_5) => __awaiter(this, [userlist_id_3, limit_1, offset_1, ...args_5], void 0, function* (userlist_id, limit, offset, options = {}) {
            // verify required parameter 'userlist_id' is not null or undefined
            (0, common_1.assertParamExists)('userlistsItemsList', 'userlist_id', userlist_id);
            const localVarPath = `/api/v1/userlists/{userlist_id}/items/`
                .replace(`{${"userlist_id"}}`, encodeURIComponent(String(userlist_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Viewset for UserListRelationships
         * @summary User List Resource Relationship Update
         * @param {number} id A unique integer value identifying this user list relationship.
         * @param {number} userlist_id id of the parent user list
         * @param {PatchedUserListRelationshipRequest} [PatchedUserListRelationshipRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsItemsPartialUpdate: (id_3, userlist_id_4, PatchedUserListRelationshipRequest_1, ...args_6) => __awaiter(this, [id_3, userlist_id_4, PatchedUserListRelationshipRequest_1, ...args_6], void 0, function* (id, userlist_id, PatchedUserListRelationshipRequest, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('userlistsItemsPartialUpdate', 'id', id);
            // verify required parameter 'userlist_id' is not null or undefined
            (0, common_1.assertParamExists)('userlistsItemsPartialUpdate', 'userlist_id', userlist_id);
            const localVarPath = `/api/v1/userlists/{userlist_id}/items/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userlist_id"}}`, encodeURIComponent(String(userlist_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(PatchedUserListRelationshipRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Viewset for UserListRelationships
         * @summary User List Resources Retrieve
         * @param {number} id A unique integer value identifying this user list relationship.
         * @param {number} userlist_id id of the parent user list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsItemsRetrieve: (id_4, userlist_id_5, ...args_7) => __awaiter(this, [id_4, userlist_id_5, ...args_7], void 0, function* (id, userlist_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('userlistsItemsRetrieve', 'id', id);
            // verify required parameter 'userlist_id' is not null or undefined
            (0, common_1.assertParamExists)('userlistsItemsRetrieve', 'userlist_id', userlist_id);
            const localVarPath = `/api/v1/userlists/{userlist_id}/items/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userlist_id"}}`, encodeURIComponent(String(userlist_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Viewset for UserLists
         * @summary List
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsList: (limit_2, offset_2, ...args_8) => __awaiter(this, [limit_2, offset_2, ...args_8], void 0, function* (limit, offset, options = {}) {
            const localVarPath = `/api/v1/userlists/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Viewset for UserLists
         * @summary Update
         * @param {number} id A unique integer value identifying this user list.
         * @param {PatchedUserListRequest} [PatchedUserListRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsPartialUpdate: (id_5, PatchedUserListRequest_1, ...args_9) => __awaiter(this, [id_5, PatchedUserListRequest_1, ...args_9], void 0, function* (id, PatchedUserListRequest, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('userlistsPartialUpdate', 'id', id);
            const localVarPath = `/api/v1/userlists/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(PatchedUserListRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Viewset for UserLists
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this user list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsRetrieve: (id_6, ...args_10) => __awaiter(this, [id_6, ...args_10], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('userlistsRetrieve', 'id', id);
            const localVarPath = `/api/v1/userlists/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.UserlistsApiAxiosParamCreator = UserlistsApiAxiosParamCreator;
/**
 * UserlistsApi - functional programming interface
 * @export
 */
const UserlistsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.UserlistsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Viewset for UserLists
         * @summary Create
         * @param {UserListRequest} UserListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsCreate(UserListRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.userlistsCreate(UserListRequest, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['UserlistsApi.userlistsCreate']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Viewset for UserLists
         * @summary Destroy
         * @param {number} id A unique integer value identifying this user list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsDestroy(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.userlistsDestroy(id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['UserlistsApi.userlistsDestroy']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Viewset for UserListRelationships
         * @summary User List Resource Relationship Add
         * @param {number} userlist_id id of the parent user list
         * @param {UserListRelationshipRequest} UserListRelationshipRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsItemsCreate(userlist_id, UserListRelationshipRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.userlistsItemsCreate(userlist_id, UserListRelationshipRequest, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['UserlistsApi.userlistsItemsCreate']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Viewset for UserListRelationships
         * @summary User List Resource Relationship Remove
         * @param {number} id A unique integer value identifying this user list relationship.
         * @param {number} userlist_id id of the parent user list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsItemsDestroy(id, userlist_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.userlistsItemsDestroy(id, userlist_id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['UserlistsApi.userlistsItemsDestroy']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Viewset for UserListRelationships
         * @summary User List Resources List
         * @param {number} userlist_id id of the parent user list
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsItemsList(userlist_id, limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.userlistsItemsList(userlist_id, limit, offset, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['UserlistsApi.userlistsItemsList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Viewset for UserListRelationships
         * @summary User List Resource Relationship Update
         * @param {number} id A unique integer value identifying this user list relationship.
         * @param {number} userlist_id id of the parent user list
         * @param {PatchedUserListRelationshipRequest} [PatchedUserListRelationshipRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsItemsPartialUpdate(id, userlist_id, PatchedUserListRelationshipRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.userlistsItemsPartialUpdate(id, userlist_id, PatchedUserListRelationshipRequest, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['UserlistsApi.userlistsItemsPartialUpdate']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Viewset for UserListRelationships
         * @summary User List Resources Retrieve
         * @param {number} id A unique integer value identifying this user list relationship.
         * @param {number} userlist_id id of the parent user list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsItemsRetrieve(id, userlist_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.userlistsItemsRetrieve(id, userlist_id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['UserlistsApi.userlistsItemsRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Viewset for UserLists
         * @summary List
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsList(limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.userlistsList(limit, offset, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['UserlistsApi.userlistsList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Viewset for UserLists
         * @summary Update
         * @param {number} id A unique integer value identifying this user list.
         * @param {PatchedUserListRequest} [PatchedUserListRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsPartialUpdate(id, PatchedUserListRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.userlistsPartialUpdate(id, PatchedUserListRequest, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['UserlistsApi.userlistsPartialUpdate']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Viewset for UserLists
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this user list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsRetrieve(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.userlistsRetrieve(id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['UserlistsApi.userlistsRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
exports.UserlistsApiFp = UserlistsApiFp;
/**
 * UserlistsApi - factory interface
 * @export
 */
const UserlistsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.UserlistsApiFp)(configuration);
    return {
        /**
         * Viewset for UserLists
         * @summary Create
         * @param {UserlistsApiUserlistsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsCreate(requestParameters, options) {
            return localVarFp.userlistsCreate(requestParameters.UserListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for UserLists
         * @summary Destroy
         * @param {UserlistsApiUserlistsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsDestroy(requestParameters, options) {
            return localVarFp.userlistsDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for UserListRelationships
         * @summary User List Resource Relationship Add
         * @param {UserlistsApiUserlistsItemsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsItemsCreate(requestParameters, options) {
            return localVarFp.userlistsItemsCreate(requestParameters.userlist_id, requestParameters.UserListRelationshipRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for UserListRelationships
         * @summary User List Resource Relationship Remove
         * @param {UserlistsApiUserlistsItemsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsItemsDestroy(requestParameters, options) {
            return localVarFp.userlistsItemsDestroy(requestParameters.id, requestParameters.userlist_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for UserListRelationships
         * @summary User List Resources List
         * @param {UserlistsApiUserlistsItemsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsItemsList(requestParameters, options) {
            return localVarFp.userlistsItemsList(requestParameters.userlist_id, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for UserListRelationships
         * @summary User List Resource Relationship Update
         * @param {UserlistsApiUserlistsItemsPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsItemsPartialUpdate(requestParameters, options) {
            return localVarFp.userlistsItemsPartialUpdate(requestParameters.id, requestParameters.userlist_id, requestParameters.PatchedUserListRelationshipRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for UserListRelationships
         * @summary User List Resources Retrieve
         * @param {UserlistsApiUserlistsItemsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsItemsRetrieve(requestParameters, options) {
            return localVarFp.userlistsItemsRetrieve(requestParameters.id, requestParameters.userlist_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for UserLists
         * @summary List
         * @param {UserlistsApiUserlistsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsList(requestParameters = {}, options) {
            return localVarFp.userlistsList(requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for UserLists
         * @summary Update
         * @param {UserlistsApiUserlistsPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsPartialUpdate(requestParameters, options) {
            return localVarFp.userlistsPartialUpdate(requestParameters.id, requestParameters.PatchedUserListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for UserLists
         * @summary Retrieve
         * @param {UserlistsApiUserlistsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userlistsRetrieve(requestParameters, options) {
            return localVarFp.userlistsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.UserlistsApiFactory = UserlistsApiFactory;
/**
 * UserlistsApi - object-oriented interface
 * @export
 * @class UserlistsApi
 * @extends {BaseAPI}
 */
class UserlistsApi extends base_1.BaseAPI {
    /**
     * Viewset for UserLists
     * @summary Create
     * @param {UserlistsApiUserlistsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserlistsApi
     */
    userlistsCreate(requestParameters, options) {
        return (0, exports.UserlistsApiFp)(this.configuration).userlistsCreate(requestParameters.UserListRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Viewset for UserLists
     * @summary Destroy
     * @param {UserlistsApiUserlistsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserlistsApi
     */
    userlistsDestroy(requestParameters, options) {
        return (0, exports.UserlistsApiFp)(this.configuration).userlistsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Viewset for UserListRelationships
     * @summary User List Resource Relationship Add
     * @param {UserlistsApiUserlistsItemsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserlistsApi
     */
    userlistsItemsCreate(requestParameters, options) {
        return (0, exports.UserlistsApiFp)(this.configuration).userlistsItemsCreate(requestParameters.userlist_id, requestParameters.UserListRelationshipRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Viewset for UserListRelationships
     * @summary User List Resource Relationship Remove
     * @param {UserlistsApiUserlistsItemsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserlistsApi
     */
    userlistsItemsDestroy(requestParameters, options) {
        return (0, exports.UserlistsApiFp)(this.configuration).userlistsItemsDestroy(requestParameters.id, requestParameters.userlist_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Viewset for UserListRelationships
     * @summary User List Resources List
     * @param {UserlistsApiUserlistsItemsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserlistsApi
     */
    userlistsItemsList(requestParameters, options) {
        return (0, exports.UserlistsApiFp)(this.configuration).userlistsItemsList(requestParameters.userlist_id, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Viewset for UserListRelationships
     * @summary User List Resource Relationship Update
     * @param {UserlistsApiUserlistsItemsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserlistsApi
     */
    userlistsItemsPartialUpdate(requestParameters, options) {
        return (0, exports.UserlistsApiFp)(this.configuration).userlistsItemsPartialUpdate(requestParameters.id, requestParameters.userlist_id, requestParameters.PatchedUserListRelationshipRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Viewset for UserListRelationships
     * @summary User List Resources Retrieve
     * @param {UserlistsApiUserlistsItemsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserlistsApi
     */
    userlistsItemsRetrieve(requestParameters, options) {
        return (0, exports.UserlistsApiFp)(this.configuration).userlistsItemsRetrieve(requestParameters.id, requestParameters.userlist_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Viewset for UserLists
     * @summary List
     * @param {UserlistsApiUserlistsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserlistsApi
     */
    userlistsList(requestParameters = {}, options) {
        return (0, exports.UserlistsApiFp)(this.configuration).userlistsList(requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Viewset for UserLists
     * @summary Update
     * @param {UserlistsApiUserlistsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserlistsApi
     */
    userlistsPartialUpdate(requestParameters, options) {
        return (0, exports.UserlistsApiFp)(this.configuration).userlistsPartialUpdate(requestParameters.id, requestParameters.PatchedUserListRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Viewset for UserLists
     * @summary Retrieve
     * @param {UserlistsApiUserlistsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserlistsApi
     */
    userlistsRetrieve(requestParameters, options) {
        return (0, exports.UserlistsApiFp)(this.configuration).userlistsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.UserlistsApi = UserlistsApi;
/**
 * VideoPlaylistsApi - axios parameter creator
 * @export
 */
const VideoPlaylistsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get a list of related learning resources for a learning resource.
         * @summary Nested Learning Resource List
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [sortby] Which field to use when ordering the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPlaylistsItemsList: (learning_resource_id_1, limit_1, offset_1, sortby_1, ...args_1) => __awaiter(this, [learning_resource_id_1, limit_1, offset_1, sortby_1, ...args_1], void 0, function* (learning_resource_id, limit, offset, sortby, options = {}) {
            // verify required parameter 'learning_resource_id' is not null or undefined
            (0, common_1.assertParamExists)('videoPlaylistsItemsList', 'learning_resource_id', learning_resource_id);
            const localVarPath = `/api/v1/video_playlists/{learning_resource_id}/items/`
                .replace(`{${"learning_resource_id"}}`, encodeURIComponent(String(learning_resource_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a singe related learning resource for a learning resource.
         * @summary Nested Learning Resource Retrieve
         * @param {number} id A unique integer value identifying this learning resource relationship.
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPlaylistsItemsRetrieve: (id_1, learning_resource_id_2, ...args_2) => __awaiter(this, [id_1, learning_resource_id_2, ...args_2], void 0, function* (id, learning_resource_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('videoPlaylistsItemsRetrieve', 'id', id);
            // verify required parameter 'learning_resource_id' is not null or undefined
            (0, common_1.assertParamExists)('videoPlaylistsItemsRetrieve', 'learning_resource_id', learning_resource_id);
            const localVarPath = `/api/v1/video_playlists/{learning_resource_id}/items/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"learning_resource_id"}}`, encodeURIComponent(String(learning_resource_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a paginated list of video playlists
         * @summary List
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<VideoPlaylistsListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<VideoPlaylistsListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<VideoPlaylistsListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<VideoPlaylistsListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<VideoPlaylistsListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {VideoPlaylistsListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPlaylistsList: (course_feature_1, department_1, level_1, limit_2, offered_by_1, offset_2, platform_1, professional_1, resource_type_1, sortby_2, topic_1, ...args_3) => __awaiter(this, [course_feature_1, department_1, level_1, limit_2, offered_by_1, offset_2, platform_1, professional_1, resource_type_1, sortby_2, topic_1, ...args_3], void 0, function* (course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options = {}) {
            const localVarPath = `/api/v1/video_playlists/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (course_feature) {
                localVarQueryParameter['course_feature'] = course_feature.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (department) {
                localVarQueryParameter['department'] = department;
            }
            if (level) {
                localVarQueryParameter['level'] = level;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (professional !== undefined) {
                localVarQueryParameter['professional'] = professional;
            }
            if (resource_type) {
                localVarQueryParameter['resource_type'] = resource_type;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            if (topic) {
                localVarQueryParameter['topic'] = topic.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a paginated list of newly released Video Playlists.
         * @summary List New
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<VideoPlaylistsNewListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<VideoPlaylistsNewListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<VideoPlaylistsNewListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<VideoPlaylistsNewListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<VideoPlaylistsNewListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {VideoPlaylistsNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPlaylistsNewList: (course_feature_2, department_2, level_2, limit_3, offered_by_2, offset_3, platform_2, professional_2, resource_type_2, sortby_3, topic_2, ...args_4) => __awaiter(this, [course_feature_2, department_2, level_2, limit_3, offered_by_2, offset_3, platform_2, professional_2, resource_type_2, sortby_3, topic_2, ...args_4], void 0, function* (course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options = {}) {
            const localVarPath = `/api/v1/video_playlists/new/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (course_feature) {
                localVarQueryParameter['course_feature'] = course_feature.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (department) {
                localVarQueryParameter['department'] = department;
            }
            if (level) {
                localVarQueryParameter['level'] = level;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (professional !== undefined) {
                localVarQueryParameter['professional'] = professional;
            }
            if (resource_type) {
                localVarQueryParameter['resource_type'] = resource_type;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            if (topic) {
                localVarQueryParameter['topic'] = topic.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve a single video playlist
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPlaylistsRetrieve: (id_2, ...args_5) => __awaiter(this, [id_2, ...args_5], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('videoPlaylistsRetrieve', 'id', id);
            const localVarPath = `/api/v1/video_playlists/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a paginated list of upcoming Video Playlists.
         * @summary List Upcoming
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<VideoPlaylistsUpcomingListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<VideoPlaylistsUpcomingListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<VideoPlaylistsUpcomingListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<VideoPlaylistsUpcomingListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<VideoPlaylistsUpcomingListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {VideoPlaylistsUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPlaylistsUpcomingList: (course_feature_3, department_3, level_3, limit_4, offered_by_3, offset_4, platform_3, professional_3, resource_type_3, sortby_4, topic_3, ...args_6) => __awaiter(this, [course_feature_3, department_3, level_3, limit_4, offered_by_3, offset_4, platform_3, professional_3, resource_type_3, sortby_4, topic_3, ...args_6], void 0, function* (course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options = {}) {
            const localVarPath = `/api/v1/video_playlists/upcoming/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (course_feature) {
                localVarQueryParameter['course_feature'] = course_feature.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (department) {
                localVarQueryParameter['department'] = department;
            }
            if (level) {
                localVarQueryParameter['level'] = level;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (professional !== undefined) {
                localVarQueryParameter['professional'] = professional;
            }
            if (resource_type) {
                localVarQueryParameter['resource_type'] = resource_type;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            if (topic) {
                localVarQueryParameter['topic'] = topic.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.VideoPlaylistsApiAxiosParamCreator = VideoPlaylistsApiAxiosParamCreator;
/**
 * VideoPlaylistsApi - functional programming interface
 * @export
 */
const VideoPlaylistsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.VideoPlaylistsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get a list of related learning resources for a learning resource.
         * @summary Nested Learning Resource List
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [sortby] Which field to use when ordering the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPlaylistsItemsList(learning_resource_id, limit, offset, sortby, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.videoPlaylistsItemsList(learning_resource_id, limit, offset, sortby, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['VideoPlaylistsApi.videoPlaylistsItemsList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Get a singe related learning resource for a learning resource.
         * @summary Nested Learning Resource Retrieve
         * @param {number} id A unique integer value identifying this learning resource relationship.
         * @param {number} learning_resource_id id of the parent learning resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPlaylistsItemsRetrieve(id, learning_resource_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.videoPlaylistsItemsRetrieve(id, learning_resource_id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['VideoPlaylistsApi.videoPlaylistsItemsRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Get a paginated list of video playlists
         * @summary List
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<VideoPlaylistsListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<VideoPlaylistsListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<VideoPlaylistsListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<VideoPlaylistsListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<VideoPlaylistsListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {VideoPlaylistsListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPlaylistsList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.videoPlaylistsList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['VideoPlaylistsApi.videoPlaylistsList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Get a paginated list of newly released Video Playlists.
         * @summary List New
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<VideoPlaylistsNewListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<VideoPlaylistsNewListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<VideoPlaylistsNewListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<VideoPlaylistsNewListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<VideoPlaylistsNewListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {VideoPlaylistsNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPlaylistsNewList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.videoPlaylistsNewList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['VideoPlaylistsApi.videoPlaylistsNewList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Retrieve a single video playlist
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPlaylistsRetrieve(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.videoPlaylistsRetrieve(id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['VideoPlaylistsApi.videoPlaylistsRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Get a paginated list of upcoming Video Playlists.
         * @summary List Upcoming
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<VideoPlaylistsUpcomingListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<VideoPlaylistsUpcomingListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<VideoPlaylistsUpcomingListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<VideoPlaylistsUpcomingListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<VideoPlaylistsUpcomingListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {VideoPlaylistsUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPlaylistsUpcomingList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.videoPlaylistsUpcomingList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['VideoPlaylistsApi.videoPlaylistsUpcomingList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
exports.VideoPlaylistsApiFp = VideoPlaylistsApiFp;
/**
 * VideoPlaylistsApi - factory interface
 * @export
 */
const VideoPlaylistsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.VideoPlaylistsApiFp)(configuration);
    return {
        /**
         * Get a list of related learning resources for a learning resource.
         * @summary Nested Learning Resource List
         * @param {VideoPlaylistsApiVideoPlaylistsItemsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPlaylistsItemsList(requestParameters, options) {
            return localVarFp.videoPlaylistsItemsList(requestParameters.learning_resource_id, requestParameters.limit, requestParameters.offset, requestParameters.sortby, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a singe related learning resource for a learning resource.
         * @summary Nested Learning Resource Retrieve
         * @param {VideoPlaylistsApiVideoPlaylistsItemsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPlaylistsItemsRetrieve(requestParameters, options) {
            return localVarFp.videoPlaylistsItemsRetrieve(requestParameters.id, requestParameters.learning_resource_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of video playlists
         * @summary List
         * @param {VideoPlaylistsApiVideoPlaylistsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPlaylistsList(requestParameters = {}, options) {
            return localVarFp.videoPlaylistsList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of newly released Video Playlists.
         * @summary List New
         * @param {VideoPlaylistsApiVideoPlaylistsNewListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPlaylistsNewList(requestParameters = {}, options) {
            return localVarFp.videoPlaylistsNewList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single video playlist
         * @summary Retrieve
         * @param {VideoPlaylistsApiVideoPlaylistsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPlaylistsRetrieve(requestParameters, options) {
            return localVarFp.videoPlaylistsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of upcoming Video Playlists.
         * @summary List Upcoming
         * @param {VideoPlaylistsApiVideoPlaylistsUpcomingListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPlaylistsUpcomingList(requestParameters = {}, options) {
            return localVarFp.videoPlaylistsUpcomingList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(axios, basePath));
        },
    };
};
exports.VideoPlaylistsApiFactory = VideoPlaylistsApiFactory;
/**
 * VideoPlaylistsApi - object-oriented interface
 * @export
 * @class VideoPlaylistsApi
 * @extends {BaseAPI}
 */
class VideoPlaylistsApi extends base_1.BaseAPI {
    /**
     * Get a list of related learning resources for a learning resource.
     * @summary Nested Learning Resource List
     * @param {VideoPlaylistsApiVideoPlaylistsItemsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoPlaylistsApi
     */
    videoPlaylistsItemsList(requestParameters, options) {
        return (0, exports.VideoPlaylistsApiFp)(this.configuration).videoPlaylistsItemsList(requestParameters.learning_resource_id, requestParameters.limit, requestParameters.offset, requestParameters.sortby, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a singe related learning resource for a learning resource.
     * @summary Nested Learning Resource Retrieve
     * @param {VideoPlaylistsApiVideoPlaylistsItemsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoPlaylistsApi
     */
    videoPlaylistsItemsRetrieve(requestParameters, options) {
        return (0, exports.VideoPlaylistsApiFp)(this.configuration).videoPlaylistsItemsRetrieve(requestParameters.id, requestParameters.learning_resource_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a paginated list of video playlists
     * @summary List
     * @param {VideoPlaylistsApiVideoPlaylistsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoPlaylistsApi
     */
    videoPlaylistsList(requestParameters = {}, options) {
        return (0, exports.VideoPlaylistsApiFp)(this.configuration).videoPlaylistsList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a paginated list of newly released Video Playlists.
     * @summary List New
     * @param {VideoPlaylistsApiVideoPlaylistsNewListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoPlaylistsApi
     */
    videoPlaylistsNewList(requestParameters = {}, options) {
        return (0, exports.VideoPlaylistsApiFp)(this.configuration).videoPlaylistsNewList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a single video playlist
     * @summary Retrieve
     * @param {VideoPlaylistsApiVideoPlaylistsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoPlaylistsApi
     */
    videoPlaylistsRetrieve(requestParameters, options) {
        return (0, exports.VideoPlaylistsApiFp)(this.configuration).videoPlaylistsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a paginated list of upcoming Video Playlists.
     * @summary List Upcoming
     * @param {VideoPlaylistsApiVideoPlaylistsUpcomingListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoPlaylistsApi
     */
    videoPlaylistsUpcomingList(requestParameters = {}, options) {
        return (0, exports.VideoPlaylistsApiFp)(this.configuration).videoPlaylistsUpcomingList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.VideoPlaylistsApi = VideoPlaylistsApi;
/**
 * @export
 */
exports.VideoPlaylistsListDepartmentEnum = {
    _1: '1',
    _10: '10',
    _11: '11',
    _12: '12',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _2: '2',
    _20: '20',
    _21A: '21A',
    _21G: '21G',
    _21H: '21H',
    _21L: '21L',
    _21M: '21M',
    _22: '22',
    _24: '24',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    Cc: 'CC',
    CmsW: 'CMS-W',
    Ec: 'EC',
    Es: 'ES',
    Esd: 'ESD',
    Hst: 'HST',
    Ids: 'IDS',
    Mas: 'MAS',
    Pe: 'PE',
    Res: 'RES',
    Sts: 'STS',
    Wgs: 'WGS'
};
/**
 * @export
 */
exports.VideoPlaylistsListLevelEnum = {
    Advanced: 'advanced',
    Graduate: 'graduate',
    HighSchool: 'high_school',
    Intermediate: 'intermediate',
    Introductory: 'introductory',
    Noncredit: 'noncredit',
    Undergraduate: 'undergraduate'
};
/**
 * @export
 */
exports.VideoPlaylistsListOfferedByEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Mitpe: 'mitpe',
    Mitx: 'mitx',
    Ocw: 'ocw',
    Scc: 'scc',
    See: 'see',
    Xpro: 'xpro'
};
/**
 * @export
 */
exports.VideoPlaylistsListPlatformEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Edx: 'edx',
    Emeritus: 'emeritus',
    Globalalumni: 'globalalumni',
    Mitpe: 'mitpe',
    Mitxonline: 'mitxonline',
    Ocw: 'ocw',
    Oll: 'oll',
    Podcast: 'podcast',
    Scc: 'scc',
    See: 'see',
    Simplilearn: 'simplilearn',
    Susskind: 'susskind',
    Whu: 'whu',
    Xpro: 'xpro',
    Youtube: 'youtube'
};
/**
 * @export
 */
exports.VideoPlaylistsListResourceTypeEnum = {
    Course: 'course',
    LearningPath: 'learning_path',
    Podcast: 'podcast',
    PodcastEpisode: 'podcast_episode',
    Program: 'program',
    Video: 'video',
    VideoPlaylist: 'video_playlist'
};
/**
 * @export
 */
exports.VideoPlaylistsListSortbyEnum = {
    CreatedOn: '-created_on',
    Id: '-id',
    LastModified: '-last_modified',
    Mitcoursenumber: '-mitcoursenumber',
    ReadableId: '-readable_id',
    StartDate: '-start_date',
    CreatedOn2: 'created_on',
    Id2: 'id',
    LastModified2: 'last_modified',
    Mitcoursenumber2: 'mitcoursenumber',
    ReadableId2: 'readable_id',
    StartDate2: 'start_date'
};
/**
 * @export
 */
exports.VideoPlaylistsNewListDepartmentEnum = {
    _1: '1',
    _10: '10',
    _11: '11',
    _12: '12',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _2: '2',
    _20: '20',
    _21A: '21A',
    _21G: '21G',
    _21H: '21H',
    _21L: '21L',
    _21M: '21M',
    _22: '22',
    _24: '24',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    Cc: 'CC',
    CmsW: 'CMS-W',
    Ec: 'EC',
    Es: 'ES',
    Esd: 'ESD',
    Hst: 'HST',
    Ids: 'IDS',
    Mas: 'MAS',
    Pe: 'PE',
    Res: 'RES',
    Sts: 'STS',
    Wgs: 'WGS'
};
/**
 * @export
 */
exports.VideoPlaylistsNewListLevelEnum = {
    Advanced: 'advanced',
    Graduate: 'graduate',
    HighSchool: 'high_school',
    Intermediate: 'intermediate',
    Introductory: 'introductory',
    Noncredit: 'noncredit',
    Undergraduate: 'undergraduate'
};
/**
 * @export
 */
exports.VideoPlaylistsNewListOfferedByEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Mitpe: 'mitpe',
    Mitx: 'mitx',
    Ocw: 'ocw',
    Scc: 'scc',
    See: 'see',
    Xpro: 'xpro'
};
/**
 * @export
 */
exports.VideoPlaylistsNewListPlatformEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Edx: 'edx',
    Emeritus: 'emeritus',
    Globalalumni: 'globalalumni',
    Mitpe: 'mitpe',
    Mitxonline: 'mitxonline',
    Ocw: 'ocw',
    Oll: 'oll',
    Podcast: 'podcast',
    Scc: 'scc',
    See: 'see',
    Simplilearn: 'simplilearn',
    Susskind: 'susskind',
    Whu: 'whu',
    Xpro: 'xpro',
    Youtube: 'youtube'
};
/**
 * @export
 */
exports.VideoPlaylistsNewListResourceTypeEnum = {
    Course: 'course',
    LearningPath: 'learning_path',
    Podcast: 'podcast',
    PodcastEpisode: 'podcast_episode',
    Program: 'program',
    Video: 'video',
    VideoPlaylist: 'video_playlist'
};
/**
 * @export
 */
exports.VideoPlaylistsNewListSortbyEnum = {
    CreatedOn: '-created_on',
    Id: '-id',
    LastModified: '-last_modified',
    Mitcoursenumber: '-mitcoursenumber',
    ReadableId: '-readable_id',
    StartDate: '-start_date',
    CreatedOn2: 'created_on',
    Id2: 'id',
    LastModified2: 'last_modified',
    Mitcoursenumber2: 'mitcoursenumber',
    ReadableId2: 'readable_id',
    StartDate2: 'start_date'
};
/**
 * @export
 */
exports.VideoPlaylistsUpcomingListDepartmentEnum = {
    _1: '1',
    _10: '10',
    _11: '11',
    _12: '12',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _2: '2',
    _20: '20',
    _21A: '21A',
    _21G: '21G',
    _21H: '21H',
    _21L: '21L',
    _21M: '21M',
    _22: '22',
    _24: '24',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    Cc: 'CC',
    CmsW: 'CMS-W',
    Ec: 'EC',
    Es: 'ES',
    Esd: 'ESD',
    Hst: 'HST',
    Ids: 'IDS',
    Mas: 'MAS',
    Pe: 'PE',
    Res: 'RES',
    Sts: 'STS',
    Wgs: 'WGS'
};
/**
 * @export
 */
exports.VideoPlaylistsUpcomingListLevelEnum = {
    Advanced: 'advanced',
    Graduate: 'graduate',
    HighSchool: 'high_school',
    Intermediate: 'intermediate',
    Introductory: 'introductory',
    Noncredit: 'noncredit',
    Undergraduate: 'undergraduate'
};
/**
 * @export
 */
exports.VideoPlaylistsUpcomingListOfferedByEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Mitpe: 'mitpe',
    Mitx: 'mitx',
    Ocw: 'ocw',
    Scc: 'scc',
    See: 'see',
    Xpro: 'xpro'
};
/**
 * @export
 */
exports.VideoPlaylistsUpcomingListPlatformEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Edx: 'edx',
    Emeritus: 'emeritus',
    Globalalumni: 'globalalumni',
    Mitpe: 'mitpe',
    Mitxonline: 'mitxonline',
    Ocw: 'ocw',
    Oll: 'oll',
    Podcast: 'podcast',
    Scc: 'scc',
    See: 'see',
    Simplilearn: 'simplilearn',
    Susskind: 'susskind',
    Whu: 'whu',
    Xpro: 'xpro',
    Youtube: 'youtube'
};
/**
 * @export
 */
exports.VideoPlaylistsUpcomingListResourceTypeEnum = {
    Course: 'course',
    LearningPath: 'learning_path',
    Podcast: 'podcast',
    PodcastEpisode: 'podcast_episode',
    Program: 'program',
    Video: 'video',
    VideoPlaylist: 'video_playlist'
};
/**
 * @export
 */
exports.VideoPlaylistsUpcomingListSortbyEnum = {
    CreatedOn: '-created_on',
    Id: '-id',
    LastModified: '-last_modified',
    Mitcoursenumber: '-mitcoursenumber',
    ReadableId: '-readable_id',
    StartDate: '-start_date',
    CreatedOn2: 'created_on',
    Id2: 'id',
    LastModified2: 'last_modified',
    Mitcoursenumber2: 'mitcoursenumber',
    ReadableId2: 'readable_id',
    StartDate2: 'start_date'
};
/**
 * VideosApi - axios parameter creator
 * @export
 */
const VideosApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get a paginated list of videos
         * @summary List
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<VideosListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<VideosListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<VideosListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<VideosListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<VideosListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {VideosListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosList: (course_feature_1, department_1, level_1, limit_1, offered_by_1, offset_1, platform_1, professional_1, resource_type_1, sortby_1, topic_1, ...args_1) => __awaiter(this, [course_feature_1, department_1, level_1, limit_1, offered_by_1, offset_1, platform_1, professional_1, resource_type_1, sortby_1, topic_1, ...args_1], void 0, function* (course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options = {}) {
            const localVarPath = `/api/v1/videos/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (course_feature) {
                localVarQueryParameter['course_feature'] = course_feature.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (department) {
                localVarQueryParameter['department'] = department;
            }
            if (level) {
                localVarQueryParameter['level'] = level;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (professional !== undefined) {
                localVarQueryParameter['professional'] = professional;
            }
            if (resource_type) {
                localVarQueryParameter['resource_type'] = resource_type;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            if (topic) {
                localVarQueryParameter['topic'] = topic.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a paginated list of newly released Videos.
         * @summary List New
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<VideosNewListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<VideosNewListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<VideosNewListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<VideosNewListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<VideosNewListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {VideosNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosNewList: (course_feature_2, department_2, level_2, limit_2, offered_by_2, offset_2, platform_2, professional_2, resource_type_2, sortby_2, topic_2, ...args_2) => __awaiter(this, [course_feature_2, department_2, level_2, limit_2, offered_by_2, offset_2, platform_2, professional_2, resource_type_2, sortby_2, topic_2, ...args_2], void 0, function* (course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options = {}) {
            const localVarPath = `/api/v1/videos/new/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (course_feature) {
                localVarQueryParameter['course_feature'] = course_feature.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (department) {
                localVarQueryParameter['department'] = department;
            }
            if (level) {
                localVarQueryParameter['level'] = level;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (professional !== undefined) {
                localVarQueryParameter['professional'] = professional;
            }
            if (resource_type) {
                localVarQueryParameter['resource_type'] = resource_type;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            if (topic) {
                localVarQueryParameter['topic'] = topic.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve a single video
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosRetrieve: (id_1, ...args_3) => __awaiter(this, [id_1, ...args_3], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('videosRetrieve', 'id', id);
            const localVarPath = `/api/v1/videos/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a paginated list of upcoming Videos.
         * @summary List Upcoming
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<VideosUpcomingListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<VideosUpcomingListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<VideosUpcomingListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<VideosUpcomingListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<VideosUpcomingListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {VideosUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosUpcomingList: (course_feature_3, department_3, level_3, limit_3, offered_by_3, offset_3, platform_3, professional_3, resource_type_3, sortby_3, topic_3, ...args_4) => __awaiter(this, [course_feature_3, department_3, level_3, limit_3, offered_by_3, offset_3, platform_3, professional_3, resource_type_3, sortby_3, topic_3, ...args_4], void 0, function* (course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options = {}) {
            const localVarPath = `/api/v1/videos/upcoming/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (course_feature) {
                localVarQueryParameter['course_feature'] = course_feature.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (department) {
                localVarQueryParameter['department'] = department;
            }
            if (level) {
                localVarQueryParameter['level'] = level;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offered_by) {
                localVarQueryParameter['offered_by'] = offered_by;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (platform) {
                localVarQueryParameter['platform'] = platform;
            }
            if (professional !== undefined) {
                localVarQueryParameter['professional'] = professional;
            }
            if (resource_type) {
                localVarQueryParameter['resource_type'] = resource_type;
            }
            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }
            if (topic) {
                localVarQueryParameter['topic'] = topic.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.VideosApiAxiosParamCreator = VideosApiAxiosParamCreator;
/**
 * VideosApi - functional programming interface
 * @export
 */
const VideosApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.VideosApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get a paginated list of videos
         * @summary List
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<VideosListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<VideosListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<VideosListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<VideosListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<VideosListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {VideosListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.videosList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['VideosApi.videosList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Get a paginated list of newly released Videos.
         * @summary List New
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<VideosNewListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<VideosNewListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<VideosNewListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<VideosNewListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<VideosNewListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {VideosNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosNewList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.videosNewList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['VideosApi.videosNewList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Retrieve a single video
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosRetrieve(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.videosRetrieve(id, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['VideosApi.videosRetrieve']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
        /**
         * Get a paginated list of upcoming Videos.
         * @summary List Upcoming
         * @param {Array<string>} [course_feature] Multiple values may be separated by commas.
         * @param {Array<VideosUpcomingListDepartmentEnum>} [department] The department that offers learning resources  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
         * @param {Array<VideosUpcomingListLevelEnum>} [level] The academic level of the resources  * &#x60;undergraduate&#x60; - Undergraduate * &#x60;graduate&#x60; - Graduate * &#x60;high_school&#x60; - High School * &#x60;noncredit&#x60; - Non-Credit * &#x60;advanced&#x60; - Advanced * &#x60;intermediate&#x60; - Intermediate * &#x60;introductory&#x60; - Introductory
         * @param {number} [limit] Number of results to return per page.
         * @param {Array<VideosUpcomingListOfferedByEnum>} [offered_by] The organization that offers a learning resource  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<VideosUpcomingListPlatformEnum>} [platform] The platform on which learning resources are offered  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast * &#x60;youtube&#x60; - YouTube
         * @param {boolean} [professional]
         * @param {Array<VideosUpcomingListResourceTypeEnum>} [resource_type] The type of learning resource  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode * &#x60;video&#x60; - Video * &#x60;video_playlist&#x60; - Video Playlist
         * @param {VideosUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
         * @param {Array<string>} [topic] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosUpcomingList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.videosUpcomingList(course_feature, department, level, limit, offered_by, offset, platform, professional, resource_type, sortby, topic, options);
                const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const operationBasePath = (_c = (_b = base_1.operationServerMap['VideosApi.videosUpcomingList']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
            });
        },
    };
};
exports.VideosApiFp = VideosApiFp;
/**
 * VideosApi - factory interface
 * @export
 */
const VideosApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.VideosApiFp)(configuration);
    return {
        /**
         * Get a paginated list of videos
         * @summary List
         * @param {VideosApiVideosListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosList(requestParameters = {}, options) {
            return localVarFp.videosList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of newly released Videos.
         * @summary List New
         * @param {VideosApiVideosNewListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosNewList(requestParameters = {}, options) {
            return localVarFp.videosNewList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single video
         * @summary Retrieve
         * @param {VideosApiVideosRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosRetrieve(requestParameters, options) {
            return localVarFp.videosRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of upcoming Videos.
         * @summary List Upcoming
         * @param {VideosApiVideosUpcomingListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosUpcomingList(requestParameters = {}, options) {
            return localVarFp.videosUpcomingList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(axios, basePath));
        },
    };
};
exports.VideosApiFactory = VideosApiFactory;
/**
 * VideosApi - object-oriented interface
 * @export
 * @class VideosApi
 * @extends {BaseAPI}
 */
class VideosApi extends base_1.BaseAPI {
    /**
     * Get a paginated list of videos
     * @summary List
     * @param {VideosApiVideosListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApi
     */
    videosList(requestParameters = {}, options) {
        return (0, exports.VideosApiFp)(this.configuration).videosList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a paginated list of newly released Videos.
     * @summary List New
     * @param {VideosApiVideosNewListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApi
     */
    videosNewList(requestParameters = {}, options) {
        return (0, exports.VideosApiFp)(this.configuration).videosNewList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a single video
     * @summary Retrieve
     * @param {VideosApiVideosRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApi
     */
    videosRetrieve(requestParameters, options) {
        return (0, exports.VideosApiFp)(this.configuration).videosRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a paginated list of upcoming Videos.
     * @summary List Upcoming
     * @param {VideosApiVideosUpcomingListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApi
     */
    videosUpcomingList(requestParameters = {}, options) {
        return (0, exports.VideosApiFp)(this.configuration).videosUpcomingList(requestParameters.course_feature, requestParameters.department, requestParameters.level, requestParameters.limit, requestParameters.offered_by, requestParameters.offset, requestParameters.platform, requestParameters.professional, requestParameters.resource_type, requestParameters.sortby, requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.VideosApi = VideosApi;
/**
 * @export
 */
exports.VideosListDepartmentEnum = {
    _1: '1',
    _10: '10',
    _11: '11',
    _12: '12',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _2: '2',
    _20: '20',
    _21A: '21A',
    _21G: '21G',
    _21H: '21H',
    _21L: '21L',
    _21M: '21M',
    _22: '22',
    _24: '24',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    Cc: 'CC',
    CmsW: 'CMS-W',
    Ec: 'EC',
    Es: 'ES',
    Esd: 'ESD',
    Hst: 'HST',
    Ids: 'IDS',
    Mas: 'MAS',
    Pe: 'PE',
    Res: 'RES',
    Sts: 'STS',
    Wgs: 'WGS'
};
/**
 * @export
 */
exports.VideosListLevelEnum = {
    Advanced: 'advanced',
    Graduate: 'graduate',
    HighSchool: 'high_school',
    Intermediate: 'intermediate',
    Introductory: 'introductory',
    Noncredit: 'noncredit',
    Undergraduate: 'undergraduate'
};
/**
 * @export
 */
exports.VideosListOfferedByEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Mitpe: 'mitpe',
    Mitx: 'mitx',
    Ocw: 'ocw',
    Scc: 'scc',
    See: 'see',
    Xpro: 'xpro'
};
/**
 * @export
 */
exports.VideosListPlatformEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Edx: 'edx',
    Emeritus: 'emeritus',
    Globalalumni: 'globalalumni',
    Mitpe: 'mitpe',
    Mitxonline: 'mitxonline',
    Ocw: 'ocw',
    Oll: 'oll',
    Podcast: 'podcast',
    Scc: 'scc',
    See: 'see',
    Simplilearn: 'simplilearn',
    Susskind: 'susskind',
    Whu: 'whu',
    Xpro: 'xpro',
    Youtube: 'youtube'
};
/**
 * @export
 */
exports.VideosListResourceTypeEnum = {
    Course: 'course',
    LearningPath: 'learning_path',
    Podcast: 'podcast',
    PodcastEpisode: 'podcast_episode',
    Program: 'program',
    Video: 'video',
    VideoPlaylist: 'video_playlist'
};
/**
 * @export
 */
exports.VideosListSortbyEnum = {
    CreatedOn: '-created_on',
    Id: '-id',
    LastModified: '-last_modified',
    Mitcoursenumber: '-mitcoursenumber',
    ReadableId: '-readable_id',
    StartDate: '-start_date',
    CreatedOn2: 'created_on',
    Id2: 'id',
    LastModified2: 'last_modified',
    Mitcoursenumber2: 'mitcoursenumber',
    ReadableId2: 'readable_id',
    StartDate2: 'start_date'
};
/**
 * @export
 */
exports.VideosNewListDepartmentEnum = {
    _1: '1',
    _10: '10',
    _11: '11',
    _12: '12',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _2: '2',
    _20: '20',
    _21A: '21A',
    _21G: '21G',
    _21H: '21H',
    _21L: '21L',
    _21M: '21M',
    _22: '22',
    _24: '24',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    Cc: 'CC',
    CmsW: 'CMS-W',
    Ec: 'EC',
    Es: 'ES',
    Esd: 'ESD',
    Hst: 'HST',
    Ids: 'IDS',
    Mas: 'MAS',
    Pe: 'PE',
    Res: 'RES',
    Sts: 'STS',
    Wgs: 'WGS'
};
/**
 * @export
 */
exports.VideosNewListLevelEnum = {
    Advanced: 'advanced',
    Graduate: 'graduate',
    HighSchool: 'high_school',
    Intermediate: 'intermediate',
    Introductory: 'introductory',
    Noncredit: 'noncredit',
    Undergraduate: 'undergraduate'
};
/**
 * @export
 */
exports.VideosNewListOfferedByEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Mitpe: 'mitpe',
    Mitx: 'mitx',
    Ocw: 'ocw',
    Scc: 'scc',
    See: 'see',
    Xpro: 'xpro'
};
/**
 * @export
 */
exports.VideosNewListPlatformEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Edx: 'edx',
    Emeritus: 'emeritus',
    Globalalumni: 'globalalumni',
    Mitpe: 'mitpe',
    Mitxonline: 'mitxonline',
    Ocw: 'ocw',
    Oll: 'oll',
    Podcast: 'podcast',
    Scc: 'scc',
    See: 'see',
    Simplilearn: 'simplilearn',
    Susskind: 'susskind',
    Whu: 'whu',
    Xpro: 'xpro',
    Youtube: 'youtube'
};
/**
 * @export
 */
exports.VideosNewListResourceTypeEnum = {
    Course: 'course',
    LearningPath: 'learning_path',
    Podcast: 'podcast',
    PodcastEpisode: 'podcast_episode',
    Program: 'program',
    Video: 'video',
    VideoPlaylist: 'video_playlist'
};
/**
 * @export
 */
exports.VideosNewListSortbyEnum = {
    CreatedOn: '-created_on',
    Id: '-id',
    LastModified: '-last_modified',
    Mitcoursenumber: '-mitcoursenumber',
    ReadableId: '-readable_id',
    StartDate: '-start_date',
    CreatedOn2: 'created_on',
    Id2: 'id',
    LastModified2: 'last_modified',
    Mitcoursenumber2: 'mitcoursenumber',
    ReadableId2: 'readable_id',
    StartDate2: 'start_date'
};
/**
 * @export
 */
exports.VideosUpcomingListDepartmentEnum = {
    _1: '1',
    _10: '10',
    _11: '11',
    _12: '12',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _2: '2',
    _20: '20',
    _21A: '21A',
    _21G: '21G',
    _21H: '21H',
    _21L: '21L',
    _21M: '21M',
    _22: '22',
    _24: '24',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    Cc: 'CC',
    CmsW: 'CMS-W',
    Ec: 'EC',
    Es: 'ES',
    Esd: 'ESD',
    Hst: 'HST',
    Ids: 'IDS',
    Mas: 'MAS',
    Pe: 'PE',
    Res: 'RES',
    Sts: 'STS',
    Wgs: 'WGS'
};
/**
 * @export
 */
exports.VideosUpcomingListLevelEnum = {
    Advanced: 'advanced',
    Graduate: 'graduate',
    HighSchool: 'high_school',
    Intermediate: 'intermediate',
    Introductory: 'introductory',
    Noncredit: 'noncredit',
    Undergraduate: 'undergraduate'
};
/**
 * @export
 */
exports.VideosUpcomingListOfferedByEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Mitpe: 'mitpe',
    Mitx: 'mitx',
    Ocw: 'ocw',
    Scc: 'scc',
    See: 'see',
    Xpro: 'xpro'
};
/**
 * @export
 */
exports.VideosUpcomingListPlatformEnum = {
    Bootcamps: 'bootcamps',
    Csail: 'csail',
    Ctl: 'ctl',
    Edx: 'edx',
    Emeritus: 'emeritus',
    Globalalumni: 'globalalumni',
    Mitpe: 'mitpe',
    Mitxonline: 'mitxonline',
    Ocw: 'ocw',
    Oll: 'oll',
    Podcast: 'podcast',
    Scc: 'scc',
    See: 'see',
    Simplilearn: 'simplilearn',
    Susskind: 'susskind',
    Whu: 'whu',
    Xpro: 'xpro',
    Youtube: 'youtube'
};
/**
 * @export
 */
exports.VideosUpcomingListResourceTypeEnum = {
    Course: 'course',
    LearningPath: 'learning_path',
    Podcast: 'podcast',
    PodcastEpisode: 'podcast_episode',
    Program: 'program',
    Video: 'video',
    VideoPlaylist: 'video_playlist'
};
/**
 * @export
 */
exports.VideosUpcomingListSortbyEnum = {
    CreatedOn: '-created_on',
    Id: '-id',
    LastModified: '-last_modified',
    Mitcoursenumber: '-mitcoursenumber',
    ReadableId: '-readable_id',
    StartDate: '-start_date',
    CreatedOn2: 'created_on',
    Id2: 'id',
    LastModified2: 'last_modified',
    Mitcoursenumber2: 'mitcoursenumber',
    ReadableId2: 'readable_id',
    StartDate2: 'start_date'
};
//# sourceMappingURL=api.js.map